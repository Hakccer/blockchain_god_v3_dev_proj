{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entrance_fee_init",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEnterCount_init",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrf_coordinator_addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "c_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "c_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "c_call_back_gas_limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "c_num_words",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "c_nishaq_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Nishaq_Closed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Nishaq__TransferWinnerFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numplayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nishaq_state",
          "type": "uint256"
        }
      ],
      "name": "NoUpkeepNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "NishaqEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestedNishaqWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recent_winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GetYourDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enter_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter_nishaq",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNishaqState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalFunding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "get_player",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryWinnerInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxEnterCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "n_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfWinners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "total_funds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd929b9b6bb29273423abb77dcb19a12152b32662582f1e8395e01bc81fd99087",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1629805",
    "logsBloom": "0x
    "blockHash": "0x6507ac26c9fab005edf2a5f37f7f04b31851e84a6c0bc965ace222ab7c4b660e",
    "transactionHash": "0xd929b9b6bb29273423abb77dcb19a12152b32662582f1e8395e01bc81fd99087",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1629805",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    5,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "1",
    "15"
  ],
  "numDeployments": 1,
  "solcInputHash": "eeab007ed5ca73736812f2c9b935f93c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entrance_fee_init\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEnterCount_init\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrf_coordinator_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"c_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"c_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"c_call_back_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"c_num_words\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"c_nishaq_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Nishaq_Closed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Nishaq__TransferWinnerFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numplayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nishaq_state\",\"type\":\"uint256\"}],\"name\":\"NoUpkeepNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"NishaqEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestedNishaqWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recent_winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetYourDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enter_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter_nishaq\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNishaqState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_player\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryWinnerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"n_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nishaq.sol\":\"Nishaq\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Nishaq.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror NotEnoughETHEntered();\\r\\nerror You_Already_Entered_MaxTimes();\\r\\nerror Nishaq__TransferWinnerFailed();\\r\\nerror Nishaq_Closed();\\r\\nerror NoUpkeepNeeded(uint256 balance, uint256 numplayers,  uint256 nishaq_state);\\r\\n\\r\\ncontract Nishaq is VRFConsumerBaseV2, AutomationCompatibleInterface{\\r\\n    // Enums For State of Open of the Lottery\\r\\n    enum NishaqState {\\r\\n        OPEN,\\r\\n        CALC,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    address private immutable owner;\\r\\n    address private lastWinner;\\r\\n    // setting the owner variable on the above line to  set the Owner of the Contract\\r\\n\\r\\n    uint256 private entrance_fee;\\r\\n    uint256 public maxEnterCount;\\r\\n    address payable[] public n_players;\\r\\n    mapping(address => uint256) public enter_count;\\r\\n    mapping(address => uint256) public total_funds;\\r\\n\\r\\n    // VRF-Coordinator Address\\r\\n    VRFCoordinatorV2Interface private immutable i_vrf_coordinator_addr;\\r\\n\\r\\n    // Values to create a requestId for VRF-Chainlink\\r\\n    bytes32 private immutable i_keyHash;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint16 private constant i_request_confirmation_vrf = 3;\\r\\n    uint32 private immutable i_call_back_gas_limit_vrf;\\r\\n    uint32 private immutable i_num_words;\\r\\n    NishaqState private nishaq_state;\\r\\n    uint private s_timeStamp;\\r\\n    uint private nishaq_interval;\\r\\n\\r\\n    // events\\r\\n    event RequestedNishaqWinner(uint256 indexed requestId, uint32 indexed numWords);\\r\\n    event WinnerPicked(address indexed recent_winner);\\r\\n    event NishaqEntered(address indexed player);\\r\\n\\r\\n    constructor(\\r\\n        uint256 entrance_fee_init,\\r\\n        uint256 maxEnterCount_init, \\r\\n        address vrf_coordinator_addr,\\r\\n        bytes32 c_keyHash,\\r\\n        uint64 c_subscriptionId,\\r\\n        uint32 c_call_back_gas_limit,\\r\\n        uint32 c_num_words,\\r\\n        uint256 c_nishaq_interval\\r\\n    ) VRFConsumerBaseV2(vrf_coordinator_addr) AutomationCompatibleInterface(){\\r\\n        entrance_fee = entrance_fee_init;\\r\\n        maxEnterCount = maxEnterCount_init;\\r\\n        i_vrf_coordinator_addr = VRFCoordinatorV2Interface(vrf_coordinator_addr);\\r\\n        i_keyHash = c_keyHash;\\r\\n        i_subscriptionId = c_subscriptionId;\\r\\n        i_call_back_gas_limit_vrf = c_call_back_gas_limit;\\r\\n        i_num_words = c_num_words;\\r\\n        owner = msg.sender;\\r\\n        nishaq_state = NishaqState.OPEN;\\r\\n        s_timeStamp = block.timestamp;\\r\\n        nishaq_interval = c_nishaq_interval;\\r\\n    }\\r\\n\\r\\n    function enter_nishaq() public payable {\\r\\n        if(nishaq_state != NishaqState.OPEN) revert Nishaq_Closed();\\r\\n        if(msg.value < entrance_fee)revert NotEnoughETHEntered();\\r\\n        // Finding if player already exists in the array or not\\r\\n        n_players.push(payable(msg.sender));\\r\\n        total_funds[msg.sender] += msg.value;\\r\\n        enter_count[msg.sender] += 1;\\r\\n        emit NishaqEntered(msg.sender);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns(uint256){\\r\\n        return entrance_fee;\\r\\n    }\\r\\n    // Modifier Only_Entered_One\\r\\n    modifier entered_one(uint256 index){\\r\\n        require(n_players[index] == msg.sender, \\\"You cannot see the players address because you are not that one\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function get_player(uint256 index) entered_one(index) public view returns(address) {\\r\\n        return n_players[index];\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        bool isOpen = NishaqState.OPEN == nishaq_state;\\r\\n        bool timePassed = ((block.timestamp - s_timeStamp) > nishaq_interval);\\r\\n        bool hasPlayers = n_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external {\\r\\n        // Running the Winner Deciding Function here\\r\\n        (bool upkeep, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeep) revert NoUpkeepNeeded(address(this).balance, n_players.length, uint256(nishaq_state));\\r\\n        // Blocking the lottery here\\r\\n        nishaq_state = NishaqState.CALC;\\r\\n        uint256 requestId = i_vrf_coordinator_addr.requestRandomWords(\\r\\n            i_keyHash,\\r\\n            i_subscriptionId,\\r\\n            i_request_confirmation_vrf,\\r\\n            i_call_back_gas_limit_vrf,\\r\\n            i_num_words\\r\\n        );\\r\\n        emit RequestedNishaqWinner(requestId, i_num_words);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\r\\n        uint256 index_of_winner = randomWords[0] % n_players.length;\\r\\n        address payable recentWinner = n_players[index_of_winner];\\r\\n        lastWinner = recentWinner;\\r\\n        nishaq_state = NishaqState.OPEN;\\r\\n        // Opening the Lottery in the Above Line Again\\r\\n        // sending all the ETH-Balance to RecentWinner\\r\\n        n_players = new address payable[](0);\\r\\n        s_timeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        emit WinnerPicked(recentWinner);\\r\\n        if (!success) revert Nishaq__TransferWinnerFailed();\\r\\n    }\\r\\n\\r\\n    function getTotalFunding() public view returns(uint256) {\\r\\n        uint256 temp_total_funding = 0;\\r\\n        for(uint256 pla_index; pla_index < n_players.length; pla_index++){\\r\\n            temp_total_funding += total_funds[address(n_players[pla_index])];\\r\\n        }\\r\\n        return temp_total_funding;\\r\\n    }\\r\\n\\r\\n    function GetYourDetails() public view returns(uint256) {\\r\\n        return total_funds[address(msg.sender)];\\r\\n    }\\r\\n\\r\\n    function getNishaqState() public view returns(string memory){\\r\\n        uint256 temp_nishaq = uint256(nishaq_state);\\r\\n        if (temp_nishaq == 0) return \\\"Open\\\";\\r\\n        if (temp_nishaq == 1) return \\\"Calculating\\\";\\r\\n        return \\\"None\\\";\\r\\n    }\\r\\n\\r\\n    function lotteryWinnerInterval() public view returns(uint256){\\r\\n        return nishaq_interval;\\r\\n    }\\r\\n    \\r\\n    function getLastWinner() public view returns(address) {\\r\\n        return lastWinner;\\r\\n    }\\r\\n\\r\\n    function numberOfWinners() public view returns(uint256){\\r\\n        return i_num_words;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns(uint){\\r\\n        return s_timeStamp;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns(uint256) {\\r\\n        return n_players.length;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc38526056d97f2a95f5289fa2c3e7785ee60f9c4d1b48d62c7abe3a260f781ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801562000011575f80fd5b5060405162001ecd38038062001ecd8339818101604052810190620000379190620002cf565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505087600181905550866002819055508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460e081815250508367ffffffffffffffff166101008167ffffffffffffffff16815250508263ffffffff166101208163ffffffff16815250508163ffffffff166101408163ffffffff16815250503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505f60065f6101000a81548160ff0219169083600281111562000159576200015862000393565b5b021790555042600781905550806008819055505050505050505050620003c0565b5f80fd5b5f819050919050565b62000192816200017e565b81146200019d575f80fd5b50565b5f81519050620001b08162000187565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001e182620001b6565b9050919050565b620001f381620001d5565b8114620001fe575f80fd5b50565b5f815190506200021181620001e8565b92915050565b5f819050919050565b6200022b8162000217565b811462000236575f80fd5b50565b5f81519050620002498162000220565b92915050565b5f67ffffffffffffffff82169050919050565b6200026d816200024f565b811462000278575f80fd5b50565b5f815190506200028b8162000262565b92915050565b5f63ffffffff82169050919050565b620002ab8162000291565b8114620002b6575f80fd5b50565b5f81519050620002c981620002a0565b92915050565b5f805f805f805f80610100898b031215620002ef57620002ee6200017a565b5b5f620002fe8b828c01620001a0565b9850506020620003118b828c01620001a0565b9750506040620003248b828c0162000201565b9650506060620003378b828c0162000239565b95505060806200034a8b828c016200027b565b94505060a06200035d8b828c01620002b9565b93505060c0620003708b828c01620002b9565b92505060e0620003838b828c01620001a0565b9150509295985092959890939650565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60805160a05160c05160e051610100516101205161014051611aa6620004275f395f818161098901528181610a0c0152610b9501525f61096801525f61094501525f61092401525f6108e801525f610b6e01525f818161076e01526107c20152611aa65ff3fe608060405260043610610113575f3560e01c8063893d20e81161009f578063c44778ad11610063578063c44778ad14610388578063ed074709146103b2578063f88649a1146103ee578063fd6673f514610418578063fef43b201461044257610113565b8063893d20e8146102a45780638acfaca9146102ce57806397ea2865146102f8578063c063e54014610334578063c2750f991461035e57610113565b80631fe543e3116100e65780631fe543e3146101c3578063320229eb146101eb5780634585e33b146102155780636e04ff0d1461023d578063809c4d851461027a57610113565b8063031309b91461011757806304a3aba91461012157806309bc33a71461015d5780631625b57014610187575b5f80fd5b61011f61046c565b005b34801561012c575f80fd5b50610147600480360381019061014291906110fe565b61065f565b6040516101549190611168565b60405180910390f35b348015610168575f80fd5b5061017161074e565b60405161017e9190611190565b60405180910390f35b348015610192575f80fd5b506101ad60048036038101906101a891906111d3565b610757565b6040516101ba9190611190565b60405180910390f35b3480156101ce575f80fd5b506101e960048036038101906101e4919061134e565b61076c565b005b3480156101f6575f80fd5b506101ff61082c565b60405161020c9190611190565b60405180910390f35b348015610220575f80fd5b5061023b60048036038101906102369190611401565b610835565b005b348015610248575f80fd5b50610263600480360381019061025e91906114fc565b610a64565b6040516102719291906115d7565b60405180910390f35b348015610285575f80fd5b5061028e610b27565b60405161029b9190611190565b60405180910390f35b3480156102af575f80fd5b506102b8610b6b565b6040516102c59190611168565b60405180910390f35b3480156102d9575f80fd5b506102e2610b92565b6040516102ef9190611190565b60405180910390f35b348015610303575f80fd5b5061031e600480360381019061031991906110fe565b610bbf565b60405161032b9190611625565b60405180910390f35b34801561033f575f80fd5b50610348610bfa565b6040516103559190611190565b60405180910390f35b348015610369575f80fd5b50610372610c03565b60405161037f9190611190565b60405180910390f35b348015610393575f80fd5b5061039c610cb8565b6040516103a99190611190565b60405180910390f35b3480156103bd575f80fd5b506103d860048036038101906103d391906111d3565b610cbe565b6040516103e59190611190565b60405180910390f35b3480156103f9575f80fd5b50610402610cd3565b60405161040f9190611168565b60405180910390f35b348015610423575f80fd5b5061042c610cfa565b6040516104399190611190565b60405180910390f35b34801561044d575f80fd5b50610456610d06565b6040516104639190611690565b60405180910390f35b5f600281111561047f5761047e6116b0565b5b60065f9054906101000a900460ff1660028111156104a05761049f6116b0565b5b146104d7576040517f9af17cba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154341015610513576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546105bf919061170a565b92505081905550600160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610613919061170a565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fa8a654e266f85eee8278a2ffce0fbc599ecaad61e13e5ec6c04aee66a3457c3660405160405180910390a2565b5f813373ffffffffffffffffffffffffffffffffffffffff166003828154811061068c5761068b61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610701906117da565b60405180910390fd5b6003838154811061071e5761071d61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f600154905090565b6005602052805f5260405f205f915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016108159291906117f8565b60405180910390fd5b6108288282610df4565b5050565b5f600754905090565b5f61084d60405180602001604052805f815250610a64565b509050806108bb574760038054905060065f9054906101000a900460ff16600281111561087d5761087c6116b0565b5b6040517f9890590a0000000000000000000000000000000000000000000000000000000081526004016108b29392919061181f565b60405180910390fd5b600160065f6101000a81548160ff021916908360028111156108e0576108df6116b0565b5b02179055505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016109c89594939291906118c8565b6020604051808303815f875af11580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a08919061192d565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16817fabc349d6919e025518ebb5168a91131be5199b377ad4dfccfc0f642bf78be28e60405160405180910390a350505050565b5f60605f60065f9054906101000a900460ff166002811115610a8957610a886116b0565b5b5f6002811115610a9c57610a9b6116b0565b5b1490505f60085460075442610ab19190611958565b1190505f806003805490501190505f8047119050828015610acf5750835b8015610ad85750805b8015610ae15750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60038181548110610bce575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600854905090565b5f805f90505f5b600380549050811015610cb05760055f60038381548110610c2e57610c2d61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205482610c9b919061170a565b91508080610ca89061198b565b915050610c0a565b508091505090565b60025481565b6004602052805f5260405f205f915090505481565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f600380549050905090565b60605f60065f9054906101000a900460ff166002811115610d2a57610d296116b0565b5b90505f8103610d71576040518060400160405280600481526020017f4f70656e00000000000000000000000000000000000000000000000000000000815250915050610df1565b60018103610db7576040518060400160405280600b81526020017f43616c63756c6174696e67000000000000000000000000000000000000000000815250915050610df1565b6040518060400160405280600481526020017f4e6f6e65000000000000000000000000000000000000000000000000000000008152509150505b90565b5f600380549050825f81518110610e0e57610e0d61173d565b5b6020026020010151610e2091906119ff565b90505f60038281548110610e3757610e3661173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60065f6101000a81548160ff02191690836002811115610ec457610ec36116b0565b5b02179055505f67ffffffffffffffff811115610ee357610ee2611212565b5b604051908082528060200260200182016040528015610f115781602001602082028036833780820191505090505b5060039080519060200190610f27929190611018565b50426007819055505f8173ffffffffffffffffffffffffffffffffffffffff1647604051610f5490611a5c565b5f6040518083038185875af1925050503d805f8114610f8e576040519150601f19603f3d011682016040523d82523d5f602084013e610f93565b606091505b505090508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a280611011576040517f86eeb2bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b828054828255905f5260205f2090810192821561108e579160200282015b8281111561108d578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611036565b5b50905061109b919061109f565b5090565b5b808211156110b6575f815f9055506001016110a0565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6110dd816110cb565b81146110e7575f80fd5b50565b5f813590506110f8816110d4565b92915050565b5f60208284031215611113576111126110c3565b5b5f611120848285016110ea565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61115282611129565b9050919050565b61116281611148565b82525050565b5f60208201905061117b5f830184611159565b92915050565b61118a816110cb565b82525050565b5f6020820190506111a35f830184611181565b92915050565b6111b281611148565b81146111bc575f80fd5b50565b5f813590506111cd816111a9565b92915050565b5f602082840312156111e8576111e76110c3565b5b5f6111f5848285016111bf565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61124882611202565b810181811067ffffffffffffffff8211171561126757611266611212565b5b80604052505050565b5f6112796110ba565b9050611285828261123f565b919050565b5f67ffffffffffffffff8211156112a4576112a3611212565b5b602082029050602081019050919050565b5f80fd5b5f6112cb6112c68461128a565b611270565b905080838252602082019050602084028301858111156112ee576112ed6112b5565b5b835b81811015611317578061130388826110ea565b8452602084019350506020810190506112f0565b5050509392505050565b5f82601f830112611335576113346111fe565b5b81356113458482602086016112b9565b91505092915050565b5f8060408385031215611364576113636110c3565b5b5f611371858286016110ea565b925050602083013567ffffffffffffffff811115611392576113916110c7565b5b61139e85828601611321565b9150509250929050565b5f80fd5b5f8083601f8401126113c1576113c06111fe565b5b8235905067ffffffffffffffff8111156113de576113dd6113a8565b5b6020830191508360018202830111156113fa576113f96112b5565b5b9250929050565b5f8060208385031215611417576114166110c3565b5b5f83013567ffffffffffffffff811115611434576114336110c7565b5b611440858286016113ac565b92509250509250929050565b5f80fd5b5f67ffffffffffffffff82111561146a57611469611212565b5b61147382611202565b9050602081019050919050565b828183375f83830152505050565b5f6114a061149b84611450565b611270565b9050828152602081018484840111156114bc576114bb61144c565b5b6114c7848285611480565b509392505050565b5f82601f8301126114e3576114e26111fe565b5b81356114f384826020860161148e565b91505092915050565b5f60208284031215611511576115106110c3565b5b5f82013567ffffffffffffffff81111561152e5761152d6110c7565b5b61153a848285016114cf565b91505092915050565b5f8115159050919050565b61155781611543565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611594578082015181840152602081019050611579565b5f8484015250505050565b5f6115a98261155d565b6115b38185611567565b93506115c3818560208601611577565b6115cc81611202565b840191505092915050565b5f6040820190506115ea5f83018561154e565b81810360208301526115fc818461159f565b90509392505050565b5f61160f82611129565b9050919050565b61161f81611605565b82525050565b5f6020820190506116385f830184611616565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f6116628261163e565b61166c8185611648565b935061167c818560208601611577565b61168581611202565b840191505092915050565b5f6020820190508181035f8301526116a88184611658565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611714826110cb565b915061171f836110cb565b9250828201905080821115611737576117366116dd565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f596f752063616e6e6f74207365652074686520706c61796572732061646472655f8201527f7373206265636175736520796f7520617265206e6f742074686174206f6e6500602082015250565b5f6117c4603f83611648565b91506117cf8261176a565b604082019050919050565b5f6020820190508181035f8301526117f1816117b8565b9050919050565b5f60408201905061180b5f830185611159565b6118186020830184611159565b9392505050565b5f6060820190506118325f830186611181565b61183f6020830185611181565b61184c6040830184611181565b949350505050565b5f819050919050565b61186681611854565b82525050565b5f67ffffffffffffffff82169050919050565b6118888161186c565b82525050565b5f61ffff82169050919050565b6118a48161188e565b82525050565b5f63ffffffff82169050919050565b6118c2816118aa565b82525050565b5f60a0820190506118db5f83018861185d565b6118e8602083018761187f565b6118f5604083018661189b565b61190260608301856118b9565b61190f60808301846118b9565b9695505050505050565b5f81519050611927816110d4565b92915050565b5f60208284031215611942576119416110c3565b5b5f61194f84828501611919565b91505092915050565b5f611962826110cb565b915061196d836110cb565b9250828203905081811115611985576119846116dd565b5b92915050565b5f611995826110cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119c7576119c66116dd565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611a09826110cb565b9150611a14836110cb565b925082611a2457611a236119d2565b5b828206905092915050565b5f81905092915050565b50565b5f611a475f83611a2f565b9150611a5282611a39565b5f82019050919050565b5f611a6682611a3c565b915081905091905056fea26469706673582212201ee33de4e5bdc0cec2b8780f0d81f634b443c09c778a14b4567df1289ccc015364736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610610113575f3560e01c8063893d20e81161009f578063c44778ad11610063578063c44778ad14610388578063ed074709146103b2578063f88649a1146103ee578063fd6673f514610418578063fef43b201461044257610113565b8063893d20e8146102a45780638acfaca9146102ce57806397ea2865146102f8578063c063e54014610334578063c2750f991461035e57610113565b80631fe543e3116100e65780631fe543e3146101c3578063320229eb146101eb5780634585e33b146102155780636e04ff0d1461023d578063809c4d851461027a57610113565b8063031309b91461011757806304a3aba91461012157806309bc33a71461015d5780631625b57014610187575b5f80fd5b61011f61046c565b005b34801561012c575f80fd5b50610147600480360381019061014291906110fe565b61065f565b6040516101549190611168565b60405180910390f35b348015610168575f80fd5b5061017161074e565b60405161017e9190611190565b60405180910390f35b348015610192575f80fd5b506101ad60048036038101906101a891906111d3565b610757565b6040516101ba9190611190565b60405180910390f35b3480156101ce575f80fd5b506101e960048036038101906101e4919061134e565b61076c565b005b3480156101f6575f80fd5b506101ff61082c565b60405161020c9190611190565b60405180910390f35b348015610220575f80fd5b5061023b60048036038101906102369190611401565b610835565b005b348015610248575f80fd5b50610263600480360381019061025e91906114fc565b610a64565b6040516102719291906115d7565b60405180910390f35b348015610285575f80fd5b5061028e610b27565b60405161029b9190611190565b60405180910390f35b3480156102af575f80fd5b506102b8610b6b565b6040516102c59190611168565b60405180910390f35b3480156102d9575f80fd5b506102e2610b92565b6040516102ef9190611190565b60405180910390f35b348015610303575f80fd5b5061031e600480360381019061031991906110fe565b610bbf565b60405161032b9190611625565b60405180910390f35b34801561033f575f80fd5b50610348610bfa565b6040516103559190611190565b60405180910390f35b348015610369575f80fd5b50610372610c03565b60405161037f9190611190565b60405180910390f35b348015610393575f80fd5b5061039c610cb8565b6040516103a99190611190565b60405180910390f35b3480156103bd575f80fd5b506103d860048036038101906103d391906111d3565b610cbe565b6040516103e59190611190565b60405180910390f35b3480156103f9575f80fd5b50610402610cd3565b60405161040f9190611168565b60405180910390f35b348015610423575f80fd5b5061042c610cfa565b6040516104399190611190565b60405180910390f35b34801561044d575f80fd5b50610456610d06565b6040516104639190611690565b60405180910390f35b5f600281111561047f5761047e6116b0565b5b60065f9054906101000a900460ff1660028111156104a05761049f6116b0565b5b146104d7576040517f9af17cba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154341015610513576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546105bf919061170a565b92505081905550600160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610613919061170a565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fa8a654e266f85eee8278a2ffce0fbc599ecaad61e13e5ec6c04aee66a3457c3660405160405180910390a2565b5f813373ffffffffffffffffffffffffffffffffffffffff166003828154811061068c5761068b61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610701906117da565b60405180910390fd5b6003838154811061071e5761071d61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f600154905090565b6005602052805f5260405f205f915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016108159291906117f8565b60405180910390fd5b6108288282610df4565b5050565b5f600754905090565b5f61084d60405180602001604052805f815250610a64565b509050806108bb574760038054905060065f9054906101000a900460ff16600281111561087d5761087c6116b0565b5b6040517f9890590a0000000000000000000000000000000000000000000000000000000081526004016108b29392919061181f565b60405180910390fd5b600160065f6101000a81548160ff021916908360028111156108e0576108df6116b0565b5b02179055505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016109c89594939291906118c8565b6020604051808303815f875af11580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a08919061192d565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16817fabc349d6919e025518ebb5168a91131be5199b377ad4dfccfc0f642bf78be28e60405160405180910390a350505050565b5f60605f60065f9054906101000a900460ff166002811115610a8957610a886116b0565b5b5f6002811115610a9c57610a9b6116b0565b5b1490505f60085460075442610ab19190611958565b1190505f806003805490501190505f8047119050828015610acf5750835b8015610ad85750805b8015610ae15750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60038181548110610bce575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600854905090565b5f805f90505f5b600380549050811015610cb05760055f60038381548110610c2e57610c2d61173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205482610c9b919061170a565b91508080610ca89061198b565b915050610c0a565b508091505090565b60025481565b6004602052805f5260405f205f915090505481565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f600380549050905090565b60605f60065f9054906101000a900460ff166002811115610d2a57610d296116b0565b5b90505f8103610d71576040518060400160405280600481526020017f4f70656e00000000000000000000000000000000000000000000000000000000815250915050610df1565b60018103610db7576040518060400160405280600b81526020017f43616c63756c6174696e67000000000000000000000000000000000000000000815250915050610df1565b6040518060400160405280600481526020017f4e6f6e65000000000000000000000000000000000000000000000000000000008152509150505b90565b5f600380549050825f81518110610e0e57610e0d61173d565b5b6020026020010151610e2091906119ff565b90505f60038281548110610e3757610e3661173d565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60065f6101000a81548160ff02191690836002811115610ec457610ec36116b0565b5b02179055505f67ffffffffffffffff811115610ee357610ee2611212565b5b604051908082528060200260200182016040528015610f115781602001602082028036833780820191505090505b5060039080519060200190610f27929190611018565b50426007819055505f8173ffffffffffffffffffffffffffffffffffffffff1647604051610f5490611a5c565b5f6040518083038185875af1925050503d805f8114610f8e576040519150601f19603f3d011682016040523d82523d5f602084013e610f93565b606091505b505090508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a280611011576040517f86eeb2bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b828054828255905f5260205f2090810192821561108e579160200282015b8281111561108d578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611036565b5b50905061109b919061109f565b5090565b5b808211156110b6575f815f9055506001016110a0565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6110dd816110cb565b81146110e7575f80fd5b50565b5f813590506110f8816110d4565b92915050565b5f60208284031215611113576111126110c3565b5b5f611120848285016110ea565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61115282611129565b9050919050565b61116281611148565b82525050565b5f60208201905061117b5f830184611159565b92915050565b61118a816110cb565b82525050565b5f6020820190506111a35f830184611181565b92915050565b6111b281611148565b81146111bc575f80fd5b50565b5f813590506111cd816111a9565b92915050565b5f602082840312156111e8576111e76110c3565b5b5f6111f5848285016111bf565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61124882611202565b810181811067ffffffffffffffff8211171561126757611266611212565b5b80604052505050565b5f6112796110ba565b9050611285828261123f565b919050565b5f67ffffffffffffffff8211156112a4576112a3611212565b5b602082029050602081019050919050565b5f80fd5b5f6112cb6112c68461128a565b611270565b905080838252602082019050602084028301858111156112ee576112ed6112b5565b5b835b81811015611317578061130388826110ea565b8452602084019350506020810190506112f0565b5050509392505050565b5f82601f830112611335576113346111fe565b5b81356113458482602086016112b9565b91505092915050565b5f8060408385031215611364576113636110c3565b5b5f611371858286016110ea565b925050602083013567ffffffffffffffff811115611392576113916110c7565b5b61139e85828601611321565b9150509250929050565b5f80fd5b5f8083601f8401126113c1576113c06111fe565b5b8235905067ffffffffffffffff8111156113de576113dd6113a8565b5b6020830191508360018202830111156113fa576113f96112b5565b5b9250929050565b5f8060208385031215611417576114166110c3565b5b5f83013567ffffffffffffffff811115611434576114336110c7565b5b611440858286016113ac565b92509250509250929050565b5f80fd5b5f67ffffffffffffffff82111561146a57611469611212565b5b61147382611202565b9050602081019050919050565b828183375f83830152505050565b5f6114a061149b84611450565b611270565b9050828152602081018484840111156114bc576114bb61144c565b5b6114c7848285611480565b509392505050565b5f82601f8301126114e3576114e26111fe565b5b81356114f384826020860161148e565b91505092915050565b5f60208284031215611511576115106110c3565b5b5f82013567ffffffffffffffff81111561152e5761152d6110c7565b5b61153a848285016114cf565b91505092915050565b5f8115159050919050565b61155781611543565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611594578082015181840152602081019050611579565b5f8484015250505050565b5f6115a98261155d565b6115b38185611567565b93506115c3818560208601611577565b6115cc81611202565b840191505092915050565b5f6040820190506115ea5f83018561154e565b81810360208301526115fc818461159f565b90509392505050565b5f61160f82611129565b9050919050565b61161f81611605565b82525050565b5f6020820190506116385f830184611616565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f6116628261163e565b61166c8185611648565b935061167c818560208601611577565b61168581611202565b840191505092915050565b5f6020820190508181035f8301526116a88184611658565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611714826110cb565b915061171f836110cb565b9250828201905080821115611737576117366116dd565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f596f752063616e6e6f74207365652074686520706c61796572732061646472655f8201527f7373206265636175736520796f7520617265206e6f742074686174206f6e6500602082015250565b5f6117c4603f83611648565b91506117cf8261176a565b604082019050919050565b5f6020820190508181035f8301526117f1816117b8565b9050919050565b5f60408201905061180b5f830185611159565b6118186020830184611159565b9392505050565b5f6060820190506118325f830186611181565b61183f6020830185611181565b61184c6040830184611181565b949350505050565b5f819050919050565b61186681611854565b82525050565b5f67ffffffffffffffff82169050919050565b6118888161186c565b82525050565b5f61ffff82169050919050565b6118a48161188e565b82525050565b5f63ffffffff82169050919050565b6118c2816118aa565b82525050565b5f60a0820190506118db5f83018861185d565b6118e8602083018761187f565b6118f5604083018661189b565b61190260608301856118b9565b61190f60808301846118b9565b9695505050505050565b5f81519050611927816110d4565b92915050565b5f60208284031215611942576119416110c3565b5b5f61194f84828501611919565b91505092915050565b5f611962826110cb565b915061196d836110cb565b9250828203905081811115611985576119846116dd565b5b92915050565b5f611995826110cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119c7576119c66116dd565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611a09826110cb565b9150611a14836110cb565b925082611a2457611a236119d2565b5b828206905092915050565b5f81905092915050565b50565b5f611a475f83611a2f565b9150611a5282611a39565b5f82019050919050565b5f611a6682611a3c565b915081905091905056fea26469706673582212201ee33de4e5bdc0cec2b8780f0d81f634b443c09c778a14b4567df1289ccc015364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "lastWinner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "entrance_fee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "maxEnterCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 212,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "n_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 216,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "enter_count",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 220,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "total_funds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 237,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "nishaq_state",
        "offset": 0,
        "slot": "6",
        "type": "t_enum(NishaqState)201"
      },
      {
        "astId": 239,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "s_timeStamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 241,
        "contract": "contracts/Nishaq.sol:Nishaq",
        "label": "nishaq_interval",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(NishaqState)201": {
        "encoding": "inplace",
        "label": "enum Nishaq.NishaqState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}