{"id":"3a7ebb1e2515b4ee7b29e82072bf26f2","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Nishaq.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n\r\nerror NotEnoughETHEntered();\r\nerror You_Already_Entered_MaxTimes();\r\n\r\ncontract Nishaq is VRFConsumerBaseV2{\r\n    address private immutable owner;\r\n    // setting the owner variable on the above line to  set the Owner of the Contract\r\n\r\n    uint256 private entrance_fee;\r\n    uint256 public maxEnterCount;\r\n    address payable[] public n_players;\r\n    mapping(address => uint256) public enter_count;\r\n    mapping(address => uint256) public total_funds;\r\n\r\n    constructor(uint256 entrance_fee_init, uint256 maxEnterCount_init, address vrf_coordinator_addr) VRFConsumerBaseV2(vrf_coordinator_addr){\r\n        entrance_fee = entrance_fee_init;\r\n        maxEnterCount = maxEnterCount_init;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function enter_nishaq() public payable {\r\n        if(enter_count[msg.sender] >= maxEnterCount) revert You_Already_Entered_MaxTimes();\r\n        if(msg.value < entrance_fee)revert NotEnoughETHEntered();\r\n        // Finding if player already exists in the array or not\r\n        n_players.push(payable(msg.sender));\r\n        total_funds[msg.sender] += msg.value;\r\n        enter_count[msg.sender] += 1;\r\n    }\r\n\r\n    function getEntranceFee() public view returns(uint256){\r\n        return entrance_fee;\r\n    }\r\n    // Modifier Only_Entered_One\r\n    modifier entered_one(uint256 index){\r\n        require(n_players[index] == msg.sender, \"You cannot see the players address because you are not that one\");\r\n        _;\r\n    }\r\n\r\n    function get_player(uint256 index) entered_one(index) public view returns(address) {\r\n        return n_players[index];\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\r\n    }\r\n\r\n    function getTotalFunding() public view returns(uint256) {\r\n        uint256 temp_total_funding = 0;\r\n        for(uint256 pla_index; pla_index < n_players.length; pla_index++){\r\n            temp_total_funding += total_funds[address(n_players[pla_index])];\r\n        }\r\n        return temp_total_funding;\r\n    }\r\n\r\n    function GetYourDetails() public view returns(uint256) {\r\n        return total_funds[address(msg.sender)];\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6792:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8],"usedEvents":[]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:267:1","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:1","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"392:2:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"437:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":62,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"451:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":64,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"465:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":67,"nodeType":"ArrayTypeName","src":"465:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:1"},"scope":153,"src":"367:121:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"492:1511:1","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:1","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:1","nodeType":"VariableDeclaration","scope":86,"src":"2039:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"subId","nameLocation":"2067:5:1","nodeType":"VariableDeclaration","scope":86,"src":"2060:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":74,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:1","nodeType":"VariableDeclaration","scope":86,"src":"2078:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":76,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:1","nodeType":"VariableDeclaration","scope":86,"src":"2118:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":78,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:1","nodeType":"VariableDeclaration","scope":86,"src":"2147:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:1"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:1","nodeType":"VariableDeclaration","scope":86,"src":"2185:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:1"},"scope":153,"src":"2006:198:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"2208:384:1","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:1","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"2622:2:1"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"subId","nameLocation":"2650:5:1","nodeType":"VariableDeclaration","scope":92,"src":"2643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":89,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:1"},"scope":153,"src":"2595:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2661:381:1","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:1","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"subId","nameLocation":"3077:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3070:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":94,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:1"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"balance","nameLocation":"3133:7:1","nodeType":"VariableDeclaration","scope":107,"src":"3126:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":97,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:1","nodeType":"VariableDeclaration","scope":107,"src":"3148:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":99,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"owner","nameLocation":"3179:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3171:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:1","nodeType":"VariableDeclaration","scope":107,"src":"3192:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ArrayTypeName","src":"3192:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:1"},"scope":153,"src":"3045:180:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3229:164:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:1","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"subId","nameLocation":"3445:5:1","nodeType":"VariableDeclaration","scope":115,"src":"3438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:1","nodeType":"VariableDeclaration","scope":115,"src":"3452:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:1"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3478:0:1"},"scope":153,"src":"3396:83:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3483:212:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:1","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3746:5:1","nodeType":"VariableDeclaration","scope":121,"src":"3739:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:1"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"3761:0:1"},"scope":153,"src":"3698:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3766:170:1","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:1","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"subId","nameLocation":"3967:5:1","nodeType":"VariableDeclaration","scope":129,"src":"3960:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":123,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:1","nodeType":"VariableDeclaration","scope":129,"src":"3974:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"4000:0:1"},"scope":153,"src":"3939:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"4005:172:1","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":137,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"subId","nameLocation":"4211:5:1","nodeType":"VariableDeclaration","scope":137,"src":"4204:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":131,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:1","nodeType":"VariableDeclaration","scope":137,"src":"4218:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4244:0:1"},"scope":153,"src":"4180:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"4249:140:1","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"subId","nameLocation":"4427:5:1","nodeType":"VariableDeclaration","scope":145,"src":"4420:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":139,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"to","nameLocation":"4442:2:1","nodeType":"VariableDeclaration","scope":145,"src":"4434:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"4454:0:1"},"scope":153,"src":"4392:63:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"4788:5:1","nodeType":"VariableDeclaration","scope":152,"src":"4781:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:1"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":152,"src":"4818:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:1"},"scope":153,"src":"4751:73:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":154,"src":"57:4769:1","usedErrors":[],"usedEvents":[]}],"src":"32:4795:1"},"id":1},"contracts/Nishaq.sol":{"ast":{"absolutePath":"contracts/Nishaq.sol","exportedSymbols":{"Nishaq":[352],"NotEnoughETHEntered":[159],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[153],"You_Already_Entered_MaxTimes":[161]},"id":353,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":353,"sourceUnit":58,"src":"61:61:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":353,"sourceUnit":154,"src":"124:80:2","symbolAliases":[],"unitAlias":""},{"errorSelector":"3c21f230","id":159,"name":"NotEnoughETHEntered","nameLocation":"214:19:2","nodeType":"ErrorDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"233:2:2"},"src":"208:28:2"},{"errorSelector":"f80ac7d9","id":161,"name":"You_Already_Entered_MaxTimes","nameLocation":"244:28:2","nodeType":"ErrorDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"272:2:2"},"src":"238:37:2"},{"abstract":false,"baseContracts":[{"baseName":{"id":162,"name":"VRFConsumerBaseV2","nameLocations":["298:17:2"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"298:17:2"},"id":163,"nodeType":"InheritanceSpecifier","src":"298:17:2"}],"canonicalName":"Nishaq","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":352,"linearizedBaseContracts":[352,57],"name":"Nishaq","nameLocation":"288:6:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":165,"mutability":"immutable","name":"owner","nameLocation":"348:5:2","nodeType":"VariableDeclaration","scope":352,"src":"322:31:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"322:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":167,"mutability":"mutable","name":"entrance_fee","nameLocation":"465:12:2","nodeType":"VariableDeclaration","scope":352,"src":"449:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"449:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"c44778ad","id":169,"mutability":"mutable","name":"maxEnterCount","nameLocation":"499:13:2","nodeType":"VariableDeclaration","scope":352,"src":"484:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":168,"name":"uint256","nodeType":"ElementaryTypeName","src":"484:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"97ea2865","id":172,"mutability":"mutable","name":"n_players","nameLocation":"544:9:2","nodeType":"VariableDeclaration","scope":352,"src":"519:34:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"519:15:2","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":171,"nodeType":"ArrayTypeName","src":"519:17:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"public"},{"constant":false,"functionSelector":"ed074709","id":176,"mutability":"mutable","name":"enter_count","nameLocation":"595:11:2","nodeType":"VariableDeclaration","scope":352,"src":"560:46:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":175,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"568:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"560:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"1625b570","id":180,"mutability":"mutable","name":"total_funds","nameLocation":"648:11:2","nodeType":"VariableDeclaration","scope":352,"src":"613:46:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":179,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"613:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":178,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":205,"nodeType":"Block","src":"804:125:2","statements":[{"expression":{"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":192,"name":"entrance_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"815:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":193,"name":"entrance_fee_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"830:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"815:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":195,"nodeType":"ExpressionStatement","src":"815:32:2"},{"expression":{"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":196,"name":"maxEnterCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"858:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":197,"name":"maxEnterCount_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"874:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"858:34:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":199,"nodeType":"ExpressionStatement","src":"858:34:2"},{"expression":{"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":200,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"903:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":201,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"911:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"915:6:2","memberName":"sender","nodeType":"MemberAccess","src":"911:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"903:18:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":204,"nodeType":"ExpressionStatement","src":"903:18:2"}]},"id":206,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":189,"name":"vrf_coordinator_addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"783:20:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":190,"kind":"baseConstructorSpecifier","modifierName":{"id":188,"name":"VRFConsumerBaseV2","nameLocations":["765:17:2"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"765:17:2"},"nodeType":"ModifierInvocation","src":"765:39:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":182,"mutability":"mutable","name":"entrance_fee_init","nameLocation":"688:17:2","nodeType":"VariableDeclaration","scope":206,"src":"680:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":184,"mutability":"mutable","name":"maxEnterCount_init","nameLocation":"715:18:2","nodeType":"VariableDeclaration","scope":206,"src":"707:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":183,"name":"uint256","nodeType":"ElementaryTypeName","src":"707:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"vrf_coordinator_addr","nameLocation":"743:20:2","nodeType":"VariableDeclaration","scope":206,"src":"735:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"735:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"679:85:2"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"804:0:2"},"scope":352,"src":"668:261:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":252,"nodeType":"Block","src":"976:365:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":209,"name":"enter_count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"990:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":212,"indexExpression":{"expression":{"id":210,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1002:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1006:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1002:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"990:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":213,"name":"maxEnterCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"1017:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"990:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":218,"nodeType":"IfStatement","src":"987:82:2","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":215,"name":"You_Already_Entered_MaxTimes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1039:28:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1039:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"RevertStatement","src":"1032:37:2"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":219,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1083:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1087:5:2","memberName":"value","nodeType":"MemberAccess","src":"1083:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":221,"name":"entrance_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1095:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:24:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":226,"nodeType":"IfStatement","src":"1080:56:2","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":223,"name":"NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1115:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1115:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"RevertStatement","src":"1108:28:2"}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":232,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1235:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1239:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1235:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1227:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"1227:8:2","stateMutability":"payable","typeDescriptions":{}}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1227:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":227,"name":"n_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1212:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1222:4:2","memberName":"push","nodeType":"MemberAccess","src":"1212:14:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1212:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"1212:35:2"},{"expression":{"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":237,"name":"total_funds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"1258:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":240,"indexExpression":{"expression":{"id":238,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1270:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1274:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1270:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1258:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":241,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1285:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1289:5:2","memberName":"value","nodeType":"MemberAccess","src":"1285:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1258:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":244,"nodeType":"ExpressionStatement","src":"1258:36:2"},{"expression":{"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":245,"name":"enter_count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"1305:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":248,"indexExpression":{"expression":{"id":246,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1317:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1321:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1317:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1305:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1305:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":251,"nodeType":"ExpressionStatement","src":"1305:28:2"}]},"functionSelector":"031309b9","id":253,"implemented":true,"kind":"function","modifiers":[],"name":"enter_nishaq","nameLocation":"946:12:2","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[],"src":"958:2:2"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"976:0:2"},"scope":352,"src":"937:404:2","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":260,"nodeType":"Block","src":"1403:38:2","statements":[{"expression":{"id":258,"name":"entrance_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1421:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":257,"id":259,"nodeType":"Return","src":"1414:19:2"}]},"functionSelector":"09bc33a7","id":261,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"1358:14:2","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"1372:2:2"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":261,"src":"1395:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1395:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1394:9:2"},"scope":352,"src":"1349:92:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":276,"nodeType":"Block","src":"1516:137:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":266,"name":"n_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1535:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":268,"indexExpression":{"id":267,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"1545:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1535:16:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":269,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1555:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1555:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1535:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752063616e6e6f74207365652074686520706c61796572732061646472657373206265636175736520796f7520617265206e6f742074686174206f6e65","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1567:65:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0","typeString":"literal_string \"You cannot see the players address because you are not that one\""},"value":"You cannot see the players address because you are not that one"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0","typeString":"literal_string \"You cannot see the players address because you are not that one\""}],"id":265,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1527:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1527:106:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":274,"nodeType":"ExpressionStatement","src":"1527:106:2"},{"id":275,"nodeType":"PlaceholderStatement","src":"1644:1:2"}]},"id":277,"name":"entered_one","nameLocation":"1490:11:2","nodeType":"ModifierDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"index","nameLocation":"1510:5:2","nodeType":"VariableDeclaration","scope":277,"src":"1502:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1502:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1501:15:2"},"src":"1481:172:2","virtual":false,"visibility":"internal"},{"body":{"id":291,"nodeType":"Block","src":"1744:42:2","statements":[{"expression":{"baseExpression":{"id":287,"name":"n_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1762:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":289,"indexExpression":{"id":288,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"1772:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1762:16:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":286,"id":290,"nodeType":"Return","src":"1755:23:2"}]},"functionSelector":"04a3aba9","id":292,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":282,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"1708:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":283,"kind":"modifierInvocation","modifierName":{"id":281,"name":"entered_one","nameLocations":["1696:11:2"],"nodeType":"IdentifierPath","referencedDeclaration":277,"src":"1696:11:2"},"nodeType":"ModifierInvocation","src":"1696:18:2"}],"name":"get_player","nameLocation":"1670:10:2","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"index","nameLocation":"1689:5:2","nodeType":"VariableDeclaration","scope":292,"src":"1681:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:15:2"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":292,"src":"1735:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"1735:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1734:9:2"},"scope":352,"src":"1661:125:2","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[30],"body":{"id":301,"nodeType":"Block","src":"1889:8:2","statements":[]},"id":302,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"1803:18:2","nodeType":"FunctionDefinition","overrides":{"id":299,"nodeType":"OverrideSpecifier","overrides":[],"src":"1880:8:2"},"parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"requestId","nameLocation":"1830:9:2","nodeType":"VariableDeclaration","scope":302,"src":"1822:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"1822:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"randomWords","nameLocation":"1858:11:2","nodeType":"VariableDeclaration","scope":302,"src":"1841:28:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1841:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":296,"nodeType":"ArrayTypeName","src":"1841:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1821:49:2"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[],"src":"1889:0:2"},"scope":352,"src":"1794:103:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":336,"nodeType":"Block","src":"1961:251:2","statements":[{"assignments":[308],"declarations":[{"constant":false,"id":308,"mutability":"mutable","name":"temp_total_funding","nameLocation":"1980:18:2","nodeType":"VariableDeclaration","scope":336,"src":"1972:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":310,"initialValue":{"hexValue":"30","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2001:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1972:30:2"},{"body":{"id":332,"nodeType":"Block","src":"2078:91:2","statements":[{"expression":{"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":321,"name":"temp_total_funding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"2093:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":322,"name":"total_funds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"2115:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":329,"indexExpression":{"arguments":[{"baseExpression":{"id":325,"name":"n_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"2135:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":327,"indexExpression":{"id":326,"name":"pla_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2145:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2135:20:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2127:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:2","typeDescriptions":{}}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2127:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2115:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2093:64:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":331,"nodeType":"ExpressionStatement","src":"2093:64:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":314,"name":"pla_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2036:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":315,"name":"n_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"2048:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2058:6:2","memberName":"length","nodeType":"MemberAccess","src":"2048:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2036:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":333,"initializationExpression":{"assignments":[312],"declarations":[{"constant":false,"id":312,"mutability":"mutable","name":"pla_index","nameLocation":"2025:9:2","nodeType":"VariableDeclaration","scope":333,"src":"2017:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"2017:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":313,"nodeType":"VariableDeclarationStatement","src":"2017:17:2"},"loopExpression":{"expression":{"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2066:11:2","subExpression":{"id":318,"name":"pla_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2066:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":320,"nodeType":"ExpressionStatement","src":"2066:11:2"},"nodeType":"ForStatement","src":"2013:156:2"},{"expression":{"id":334,"name":"temp_total_funding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"2186:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":306,"id":335,"nodeType":"Return","src":"2179:25:2"}]},"functionSelector":"c2750f99","id":337,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalFunding","nameLocation":"1914:15:2","nodeType":"FunctionDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[],"src":"1929:2:2"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"1952:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1951:9:2"},"scope":352,"src":"1905:307:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":350,"nodeType":"Block","src":"2275:58:2","statements":[{"expression":{"baseExpression":{"id":342,"name":"total_funds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"2293:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":348,"indexExpression":{"arguments":[{"expression":{"id":345,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2313:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2317:6:2","memberName":"sender","nodeType":"MemberAccess","src":"2313:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2305:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"2305:7:2","typeDescriptions":{}}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2305:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2293:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":341,"id":349,"nodeType":"Return","src":"2286:39:2"}]},"functionSelector":"809c4d85","id":351,"implemented":true,"kind":"function","modifiers":[],"name":"GetYourDetails","nameLocation":"2229:14:2","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[],"src":"2243:2:2"},"returnParameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":351,"src":"2266:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"2266:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2265:9:2"},"scope":352,"src":"2220:113:2","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":353,"src":"279:2057:2","usedErrors":[8,159,161],"usedEvents":[]}],"src":"33:2303:2"},"id":2}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/Nishaq.sol":{"Nishaq":{"abi":[{"inputs":[{"internalType":"uint256","name":"entrance_fee_init","type":"uint256"},{"internalType":"uint256","name":"maxEnterCount_init","type":"uint256"},{"internalType":"address","name":"vrf_coordinator_addr","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"NotEnoughETHEntered","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"You_Already_Entered_MaxTimes","type":"error"},{"inputs":[],"name":"GetYourDetails","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"enter_count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enter_nishaq","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalFunding","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"get_player","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxEnterCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"n_players","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"total_funds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_206":{"entryPoint":null,"id":206,"parameterSlots":3,"returnSlots":0},"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_address_fromMemory":{"entryPoint":339,"id":null,"parameterSlots":2,"returnSlots":3},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":273,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":242,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":186,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":182,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":292,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":195,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1871:3","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:3","statements":[{"nodeType":"YulAssignment","src":"57:19:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:3"},"nodeType":"YulFunctionCall","src":"67:9:3"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:3"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:3","type":""}],"src":"7:75:3"},{"body":{"nodeType":"YulBlock","src":"177:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:3"},"nodeType":"YulFunctionCall","src":"187:12:3"},"nodeType":"YulExpressionStatement","src":"187:12:3"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:3"},{"body":{"nodeType":"YulBlock","src":"300:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:3"},"nodeType":"YulFunctionCall","src":"310:12:3"},"nodeType":"YulExpressionStatement","src":"310:12:3"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:3"},{"body":{"nodeType":"YulBlock","src":"379:32:3","statements":[{"nodeType":"YulAssignment","src":"389:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:3"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:3","type":""}],"src":"334:77:3"},{"body":{"nodeType":"YulBlock","src":"460:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:3"},"nodeType":"YulFunctionCall","src":"519:12:3"},"nodeType":"YulExpressionStatement","src":"519:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:3"},"nodeType":"YulFunctionCall","src":"490:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:3"},"nodeType":"YulFunctionCall","src":"480:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:3"},"nodeType":"YulFunctionCall","src":"473:43:3"},"nodeType":"YulIf","src":"470:63:3"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:3","type":""}],"src":"417:122:3"},{"body":{"nodeType":"YulBlock","src":"608:80:3","statements":[{"nodeType":"YulAssignment","src":"618:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"633:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"627:5:3"},"nodeType":"YulFunctionCall","src":"627:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"649:26:3"},"nodeType":"YulFunctionCall","src":"649:33:3"},"nodeType":"YulExpressionStatement","src":"649:33:3"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"586:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"594:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"602:5:3","type":""}],"src":"545:143:3"},{"body":{"nodeType":"YulBlock","src":"739:81:3","statements":[{"nodeType":"YulAssignment","src":"749:65:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"764:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"771:42:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"760:3:3"},"nodeType":"YulFunctionCall","src":"760:54:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"749:7:3"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"721:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"731:7:3","type":""}],"src":"694:126:3"},{"body":{"nodeType":"YulBlock","src":"871:51:3","statements":[{"nodeType":"YulAssignment","src":"881:35:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"910:5:3"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"892:17:3"},"nodeType":"YulFunctionCall","src":"892:24:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"881:7:3"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"853:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"863:7:3","type":""}],"src":"826:96:3"},{"body":{"nodeType":"YulBlock","src":"971:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:3"},"nodeType":"YulFunctionCall","src":"1030:12:3"},"nodeType":"YulExpressionStatement","src":"1030:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:3"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1001:17:3"},"nodeType":"YulFunctionCall","src":"1001:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:3"},"nodeType":"YulFunctionCall","src":"991:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:3"},"nodeType":"YulFunctionCall","src":"984:43:3"},"nodeType":"YulIf","src":"981:63:3"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:3","type":""}],"src":"928:122:3"},{"body":{"nodeType":"YulBlock","src":"1119:80:3","statements":[{"nodeType":"YulAssignment","src":"1129:22:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:3"},"nodeType":"YulFunctionCall","src":"1138:13:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:3"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1160:26:3"},"nodeType":"YulFunctionCall","src":"1160:33:3"},"nodeType":"YulExpressionStatement","src":"1160:33:3"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:3","type":""}],"src":"1056:143:3"},{"body":{"nodeType":"YulBlock","src":"1316:552:3","statements":[{"body":{"nodeType":"YulBlock","src":"1362:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1364:77:3"},"nodeType":"YulFunctionCall","src":"1364:79:3"},"nodeType":"YulExpressionStatement","src":"1364:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1337:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1333:3:3"},"nodeType":"YulFunctionCall","src":"1333:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"1358:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1329:3:3"},"nodeType":"YulFunctionCall","src":"1329:32:3"},"nodeType":"YulIf","src":"1326:119:3"},{"nodeType":"YulBlock","src":"1455:128:3","statements":[{"nodeType":"YulVariableDeclaration","src":"1470:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"1484:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1474:6:3","type":""}]},{"nodeType":"YulAssignment","src":"1499:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1545:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"1556:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1541:3:3"},"nodeType":"YulFunctionCall","src":"1541:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1565:7:3"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1509:31:3"},"nodeType":"YulFunctionCall","src":"1509:64:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1499:6:3"}]}]},{"nodeType":"YulBlock","src":"1593:129:3","statements":[{"nodeType":"YulVariableDeclaration","src":"1608:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"1622:2:3","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1612:6:3","type":""}]},{"nodeType":"YulAssignment","src":"1638:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1684:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"1695:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1680:3:3"},"nodeType":"YulFunctionCall","src":"1680:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1704:7:3"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1648:31:3"},"nodeType":"YulFunctionCall","src":"1648:64:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1638:6:3"}]}]},{"nodeType":"YulBlock","src":"1732:129:3","statements":[{"nodeType":"YulVariableDeclaration","src":"1747:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"1761:2:3","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1751:6:3","type":""}]},{"nodeType":"YulAssignment","src":"1777:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1823:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"1834:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:3"},"nodeType":"YulFunctionCall","src":"1819:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1843:7:3"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1787:31:3"},"nodeType":"YulFunctionCall","src":"1787:64:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1777:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1270:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1281:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1293:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1301:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1309:6:3","type":""}],"src":"1205:663:3"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":3,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801562000010575f80fd5b5060405162000e0138038062000e01833981810160405281019062000036919062000153565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050825f81905550816001819055503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620001ac565b5f80fd5b5f819050919050565b620000ce81620000ba565b8114620000d9575f80fd5b50565b5f81519050620000ec81620000c3565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200011d82620000f2565b9050919050565b6200012f8162000111565b81146200013a575f80fd5b50565b5f815190506200014d8162000124565b92915050565b5f805f606084860312156200016d576200016c620000b6565b5b5f6200017c86828701620000dc565b93505060206200018f86828701620000dc565b9250506040620001a2868287016200013d565b9150509250925092565b60805160a051610c2f620001d25f395f50505f8181610528015261057c0152610c2f5ff3fe608060405260043610610090575f3560e01c8063809c4d8511610058578063809c4d851461016857806397ea286514610192578063c2750f99146101ce578063c44778ad146101f8578063ed0747091461022257610090565b8063031309b91461009457806304a3aba91461009e57806309bc33a7146100da5780631625b570146101045780631fe543e314610140575b5f80fd5b61009c61025e565b005b3480156100a9575f80fd5b506100c460048036038101906100bf919061077d565b61041a565b6040516100d191906107e7565b60405180910390f35b3480156100e5575f80fd5b506100ee610509565b6040516100fb919061080f565b60405180910390f35b34801561010f575f80fd5b5061012a60048036038101906101259190610852565b610511565b604051610137919061080f565b60405180910390f35b34801561014b575f80fd5b50610166600480360381019061016191906109cd565b610526565b005b348015610173575f80fd5b5061017c6105e6565b604051610189919061080f565b60405180910390f35b34801561019d575f80fd5b506101b860048036038101906101b3919061077d565b61062a565b6040516101c59190610a47565b60405180910390f35b3480156101d9575f80fd5b506101e2610665565b6040516101ef919061080f565b60405180910390f35b348015610203575f80fd5b5061020c61071a565b604051610219919061080f565b60405180910390f35b34801561022d575f80fd5b5061024860048036038101906102439190610852565b610720565b604051610255919061080f565b60405180910390f35b60015460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054106102d6576040517ff80ac7d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f54341015610311576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600233908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103bd9190610a8d565b92505081905550600160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546104119190610a8d565b92505081905550565b5f813373ffffffffffffffffffffffffffffffffffffffff166002828154811061044757610446610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90610b6d565b60405180910390fd5b600283815481106104d9576104d8610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f8054905090565b6004602052805f5260405f205f915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105cf929190610b8b565b60405180910390fd5b6105e28282610735565b5050565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b60028181548110610639575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f90505f5b6002805490508110156107125760045f600283815481106106905761068f610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054826106fd9190610a8d565b9150808061070a90610bb2565b91505061066c565b508091505090565b60015481565b6003602052805f5260405f205f915090505481565b5050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61075c8161074a565b8114610766575f80fd5b50565b5f8135905061077781610753565b92915050565b5f6020828403121561079257610791610742565b5b5f61079f84828501610769565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107d1826107a8565b9050919050565b6107e1816107c7565b82525050565b5f6020820190506107fa5f8301846107d8565b92915050565b6108098161074a565b82525050565b5f6020820190506108225f830184610800565b92915050565b610831816107c7565b811461083b575f80fd5b50565b5f8135905061084c81610828565b92915050565b5f6020828403121561086757610866610742565b5b5f6108748482850161083e565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6108c782610881565b810181811067ffffffffffffffff821117156108e6576108e5610891565b5b80604052505050565b5f6108f8610739565b905061090482826108be565b919050565b5f67ffffffffffffffff82111561092357610922610891565b5b602082029050602081019050919050565b5f80fd5b5f61094a61094584610909565b6108ef565b9050808382526020820190506020840283018581111561096d5761096c610934565b5b835b8181101561099657806109828882610769565b84526020840193505060208101905061096f565b5050509392505050565b5f82601f8301126109b4576109b361087d565b5b81356109c4848260208601610938565b91505092915050565b5f80604083850312156109e3576109e2610742565b5b5f6109f085828601610769565b925050602083013567ffffffffffffffff811115610a1157610a10610746565b5b610a1d858286016109a0565b9150509250929050565b5f610a31826107a8565b9050919050565b610a4181610a27565b82525050565b5f602082019050610a5a5f830184610a38565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a978261074a565b9150610aa28361074a565b9250828201905080821115610aba57610ab9610a60565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f596f752063616e6e6f74207365652074686520706c61796572732061646472655f8201527f7373206265636175736520796f7520617265206e6f742074686174206f6e6500602082015250565b5f610b57603f83610aed565b9150610b6282610afd565b604082019050919050565b5f6020820190508181035f830152610b8481610b4b565b9050919050565b5f604082019050610b9e5f8301856107d8565b610bab60208301846107d8565b9392505050565b5f610bbc8261074a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bee57610bed610a60565b5b60018201905091905056fea26469706673582212207cc73b21ec567c5cc4b10c9184fa8e48cecf71453597f0129f4f0e28bbd717ef64736f6c63430008140033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xE01 CODESIZE SUB DUP1 PUSH3 0xE01 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x36 SWAP2 SWAP1 PUSH3 0x153 JUMP JUMPDEST DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP DUP3 PUSH0 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP PUSH3 0x1AC JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xCE DUP2 PUSH3 0xBA JUMP JUMPDEST DUP2 EQ PUSH3 0xD9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH3 0xEC DUP2 PUSH3 0xC3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x11D DUP3 PUSH3 0xF2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x12F DUP2 PUSH3 0x111 JUMP JUMPDEST DUP2 EQ PUSH3 0x13A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH3 0x14D DUP2 PUSH3 0x124 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x16D JUMPI PUSH3 0x16C PUSH3 0xB6 JUMP JUMPDEST JUMPDEST PUSH0 PUSH3 0x17C DUP7 DUP3 DUP8 ADD PUSH3 0xDC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x18F DUP7 DUP3 DUP8 ADD PUSH3 0xDC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x1A2 DUP7 DUP3 DUP8 ADD PUSH3 0x13D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0xC2F PUSH3 0x1D2 PUSH0 CODECOPY PUSH0 POP POP PUSH0 DUP2 DUP2 PUSH2 0x528 ADD MSTORE PUSH2 0x57C ADD MSTORE PUSH2 0xC2F PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x90 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x809C4D85 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x809C4D85 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x97EA2865 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xC2750F99 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0xC44778AD EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xED074709 EQ PUSH2 0x222 JUMPI PUSH2 0x90 JUMP JUMPDEST DUP1 PUSH4 0x31309B9 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x4A3ABA9 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x1625B570 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x140 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x25E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD1 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x511 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x161 SWAP2 SWAP1 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x526 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x5E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x203 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x20C PUSH2 0x71A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x720 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD LT PUSH2 0x2D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF80AC7D900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD CALLVALUE LT ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3C21F23000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x447 JUMPI PUSH2 0x446 PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xB6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x4D9 JUMPI PUSH2 0x4D8 PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D8 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CF SWAP3 SWAP2 SWAP1 PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E2 DUP3 DUP3 PUSH2 0x735 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x639 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH0 JUMPDEST PUSH1 0x2 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x712 JUMPI PUSH1 0x4 PUSH0 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x690 JUMPI PUSH2 0x68F PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP3 PUSH2 0x6FD SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0x70A SWAP1 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x66C JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x75C DUP2 PUSH2 0x74A JUMP JUMPDEST DUP2 EQ PUSH2 0x766 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x777 DUP2 PUSH2 0x753 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x792 JUMPI PUSH2 0x791 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x79F DUP5 DUP3 DUP6 ADD PUSH2 0x769 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7D1 DUP3 PUSH2 0x7A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E1 DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7FA PUSH0 DUP4 ADD DUP5 PUSH2 0x7D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x809 DUP2 PUSH2 0x74A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x822 PUSH0 DUP4 ADD DUP5 PUSH2 0x800 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x831 DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x83B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x84C DUP2 PUSH2 0x828 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x867 JUMPI PUSH2 0x866 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x874 DUP5 DUP3 DUP6 ADD PUSH2 0x83E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x8C7 DUP3 PUSH2 0x881 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8E6 JUMPI PUSH2 0x8E5 PUSH2 0x891 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x8F8 PUSH2 0x739 JUMP JUMPDEST SWAP1 POP PUSH2 0x904 DUP3 DUP3 PUSH2 0x8BE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x923 JUMPI PUSH2 0x922 PUSH2 0x891 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH2 0x94A PUSH2 0x945 DUP5 PUSH2 0x909 JUMP JUMPDEST PUSH2 0x8EF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x96D JUMPI PUSH2 0x96C PUSH2 0x934 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x996 JUMPI DUP1 PUSH2 0x982 DUP9 DUP3 PUSH2 0x769 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x96F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9B4 JUMPI PUSH2 0x9B3 PUSH2 0x87D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9C4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x938 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E3 JUMPI PUSH2 0x9E2 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x9F0 DUP6 DUP3 DUP7 ADD PUSH2 0x769 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA11 JUMPI PUSH2 0xA10 PUSH2 0x746 JUMP JUMPDEST JUMPDEST PUSH2 0xA1D DUP6 DUP3 DUP7 ADD PUSH2 0x9A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xA31 DUP3 PUSH2 0x7A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA41 DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA5A PUSH0 DUP4 ADD DUP5 PUSH2 0xA38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xA97 DUP3 PUSH2 0x74A JUMP JUMPDEST SWAP2 POP PUSH2 0xAA2 DUP4 PUSH2 0x74A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xABA JUMPI PUSH2 0xAB9 PUSH2 0xA60 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752063616E6E6F74207365652074686520706C6179657273206164647265 PUSH0 DUP3 ADD MSTORE PUSH32 0x7373206265636175736520796F7520617265206E6F742074686174206F6E6500 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xB57 PUSH1 0x3F DUP4 PUSH2 0xAED JUMP JUMPDEST SWAP2 POP PUSH2 0xB62 DUP3 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xB84 DUP2 PUSH2 0xB4B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xB9E PUSH0 DUP4 ADD DUP6 PUSH2 0x7D8 JUMP JUMPDEST PUSH2 0xBAB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7D8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBBC DUP3 PUSH2 0x74A JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xBEE JUMPI PUSH2 0xBED PUSH2 0xA60 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xC73B21EC567C5CC4B10C9184FA8E48CECF71453597F0129F4F0E28BBD7 OR 0xEF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"279:2057:2:-:0;;;668:261;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;783:20;5616:15:0;5599:32;;;;;;;;;;5556:80;830:17:2::1;815:12;:32;;;;874:18;858:13;:34;;;;911:10;903:18;;;;;;;;::::0;::::1;668:261:::0;;;279:2057;;88:117:3;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:126::-;731:7;771:42;764:5;760:54;749:65;;694:126;;;:::o;826:96::-;863:7;892:24;910:5;892:24;:::i;:::-;881:35;;826:96;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:663::-;1293:6;1301;1309;1358:2;1346:9;1337:7;1333:23;1329:32;1326:119;;;1364:79;;:::i;:::-;1326:119;1484:1;1509:64;1565:7;1556:6;1545:9;1541:22;1509:64;:::i;:::-;1499:74;;1455:128;1622:2;1648:64;1704:7;1695:6;1684:9;1680:22;1648:64;:::i;:::-;1638:74;;1593:129;1761:2;1787:64;1843:7;1834:6;1823:9;1819:22;1787:64;:::i;:::-;1777:74;;1732:129;1205:663;;;;;:::o;279:2057:2:-;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@GetYourDetails_351":{"entryPoint":1510,"id":351,"parameterSlots":0,"returnSlots":1},"@enter_count_176":{"entryPoint":1824,"id":176,"parameterSlots":0,"returnSlots":0},"@enter_nishaq_253":{"entryPoint":606,"id":253,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_302":{"entryPoint":1845,"id":302,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_261":{"entryPoint":1289,"id":261,"parameterSlots":0,"returnSlots":1},"@getTotalFunding_337":{"entryPoint":1637,"id":337,"parameterSlots":0,"returnSlots":1},"@get_player_292":{"entryPoint":1050,"id":292,"parameterSlots":1,"returnSlots":1},"@maxEnterCount_169":{"entryPoint":1818,"id":169,"parameterSlots":0,"returnSlots":0},"@n_players_172":{"entryPoint":1578,"id":172,"parameterSlots":0,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":1318,"id":56,"parameterSlots":2,"returnSlots":0},"@total_funds_180":{"entryPoint":1297,"id":180,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2360,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2464,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1897,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2130,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2509,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_payable_to_t_address_payable_fromStack":{"entryPoint":2616,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2008,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0_to_t_string_memory_ptr_fromStack":{"entryPoint":2891,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2048,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":2631,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":2955,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2925,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2063,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2287,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1849,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2313,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2797,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2701,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1991,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":2599,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1960,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1866,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2238,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":2994,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2656,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2752,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2193,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2173,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2356,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1862,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1858,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2177,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0":{"entryPoint":2813,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2088,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1875,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8555:3","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:3","statements":[{"nodeType":"YulAssignment","src":"57:19:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:3"},"nodeType":"YulFunctionCall","src":"67:9:3"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:3"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:3","type":""}],"src":"7:75:3"},{"body":{"nodeType":"YulBlock","src":"177:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:3"},"nodeType":"YulFunctionCall","src":"187:12:3"},"nodeType":"YulExpressionStatement","src":"187:12:3"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:3"},{"body":{"nodeType":"YulBlock","src":"300:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:3"},"nodeType":"YulFunctionCall","src":"310:12:3"},"nodeType":"YulExpressionStatement","src":"310:12:3"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:3"},{"body":{"nodeType":"YulBlock","src":"379:32:3","statements":[{"nodeType":"YulAssignment","src":"389:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:3"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:3","type":""}],"src":"334:77:3"},{"body":{"nodeType":"YulBlock","src":"460:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:3"},"nodeType":"YulFunctionCall","src":"519:12:3"},"nodeType":"YulExpressionStatement","src":"519:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:3"},"nodeType":"YulFunctionCall","src":"490:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:3"},"nodeType":"YulFunctionCall","src":"480:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:3"},"nodeType":"YulFunctionCall","src":"473:43:3"},"nodeType":"YulIf","src":"470:63:3"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:3","type":""}],"src":"417:122:3"},{"body":{"nodeType":"YulBlock","src":"597:87:3","statements":[{"nodeType":"YulAssignment","src":"607:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:3"},"nodeType":"YulFunctionCall","src":"616:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:3"},"nodeType":"YulFunctionCall","src":"645:33:3"},"nodeType":"YulExpressionStatement","src":"645:33:3"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:3","type":""}],"src":"545:139:3"},{"body":{"nodeType":"YulBlock","src":"756:263:3","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:3"},"nodeType":"YulFunctionCall","src":"804:79:3"},"nodeType":"YulExpressionStatement","src":"804:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:3"},"nodeType":"YulFunctionCall","src":"773:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:3"},"nodeType":"YulFunctionCall","src":"769:32:3"},"nodeType":"YulIf","src":"766:119:3"},{"nodeType":"YulBlock","src":"895:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:3","type":""}]},{"nodeType":"YulAssignment","src":"939:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:3"},"nodeType":"YulFunctionCall","src":"970:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"949:20:3"},"nodeType":"YulFunctionCall","src":"949:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:3","type":""}],"src":"690:329:3"},{"body":{"nodeType":"YulBlock","src":"1070:81:3","statements":[{"nodeType":"YulAssignment","src":"1080:65:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1095:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"1102:42:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1091:3:3"},"nodeType":"YulFunctionCall","src":"1091:54:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1080:7:3"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1052:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1062:7:3","type":""}],"src":"1025:126:3"},{"body":{"nodeType":"YulBlock","src":"1202:51:3","statements":[{"nodeType":"YulAssignment","src":"1212:35:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1241:5:3"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1223:17:3"},"nodeType":"YulFunctionCall","src":"1223:24:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1212:7:3"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1184:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1194:7:3","type":""}],"src":"1157:96:3"},{"body":{"nodeType":"YulBlock","src":"1324:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1341:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1364:5:3"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1346:17:3"},"nodeType":"YulFunctionCall","src":"1346:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1334:6:3"},"nodeType":"YulFunctionCall","src":"1334:37:3"},"nodeType":"YulExpressionStatement","src":"1334:37:3"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1312:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1319:3:3","type":""}],"src":"1259:118:3"},{"body":{"nodeType":"YulBlock","src":"1481:124:3","statements":[{"nodeType":"YulAssignment","src":"1491:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1503:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1514:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1499:3:3"},"nodeType":"YulFunctionCall","src":"1499:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1491:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1571:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1584:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1595:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1580:3:3"},"nodeType":"YulFunctionCall","src":"1580:17:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1527:43:3"},"nodeType":"YulFunctionCall","src":"1527:71:3"},"nodeType":"YulExpressionStatement","src":"1527:71:3"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1453:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1465:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1476:4:3","type":""}],"src":"1383:222:3"},{"body":{"nodeType":"YulBlock","src":"1676:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1693:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1716:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1698:17:3"},"nodeType":"YulFunctionCall","src":"1698:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1686:6:3"},"nodeType":"YulFunctionCall","src":"1686:37:3"},"nodeType":"YulExpressionStatement","src":"1686:37:3"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1664:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1671:3:3","type":""}],"src":"1611:118:3"},{"body":{"nodeType":"YulBlock","src":"1833:124:3","statements":[{"nodeType":"YulAssignment","src":"1843:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1855:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1866:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1851:3:3"},"nodeType":"YulFunctionCall","src":"1851:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1843:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1923:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1936:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1947:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1932:3:3"},"nodeType":"YulFunctionCall","src":"1932:17:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1879:43:3"},"nodeType":"YulFunctionCall","src":"1879:71:3"},"nodeType":"YulExpressionStatement","src":"1879:71:3"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1805:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1817:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1828:4:3","type":""}],"src":"1735:222:3"},{"body":{"nodeType":"YulBlock","src":"2006:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"2063:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2072:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2075:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2065:6:3"},"nodeType":"YulFunctionCall","src":"2065:12:3"},"nodeType":"YulExpressionStatement","src":"2065:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2029:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2054:5:3"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2036:17:3"},"nodeType":"YulFunctionCall","src":"2036:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2026:2:3"},"nodeType":"YulFunctionCall","src":"2026:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2019:6:3"},"nodeType":"YulFunctionCall","src":"2019:43:3"},"nodeType":"YulIf","src":"2016:63:3"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1999:5:3","type":""}],"src":"1963:122:3"},{"body":{"nodeType":"YulBlock","src":"2143:87:3","statements":[{"nodeType":"YulAssignment","src":"2153:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2175:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2162:12:3"},"nodeType":"YulFunctionCall","src":"2162:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2153:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2218:5:3"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2191:26:3"},"nodeType":"YulFunctionCall","src":"2191:33:3"},"nodeType":"YulExpressionStatement","src":"2191:33:3"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2121:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"2129:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2137:5:3","type":""}],"src":"2091:139:3"},{"body":{"nodeType":"YulBlock","src":"2302:263:3","statements":[{"body":{"nodeType":"YulBlock","src":"2348:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2350:77:3"},"nodeType":"YulFunctionCall","src":"2350:79:3"},"nodeType":"YulExpressionStatement","src":"2350:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2323:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2332:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2319:3:3"},"nodeType":"YulFunctionCall","src":"2319:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2344:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2315:3:3"},"nodeType":"YulFunctionCall","src":"2315:32:3"},"nodeType":"YulIf","src":"2312:119:3"},{"nodeType":"YulBlock","src":"2441:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2456:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"2470:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2460:6:3","type":""}]},{"nodeType":"YulAssignment","src":"2485:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2520:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"2531:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2516:3:3"},"nodeType":"YulFunctionCall","src":"2516:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2540:7:3"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2495:20:3"},"nodeType":"YulFunctionCall","src":"2495:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2485:6:3"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2272:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2283:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2295:6:3","type":""}],"src":"2236:329:3"},{"body":{"nodeType":"YulBlock","src":"2660:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2677:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2680:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2670:6:3"},"nodeType":"YulFunctionCall","src":"2670:12:3"},"nodeType":"YulExpressionStatement","src":"2670:12:3"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"2571:117:3"},{"body":{"nodeType":"YulBlock","src":"2742:54:3","statements":[{"nodeType":"YulAssignment","src":"2752:38:3","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2770:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"2777:2:3","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2766:3:3"},"nodeType":"YulFunctionCall","src":"2766:14:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2786:2:3","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2782:3:3"},"nodeType":"YulFunctionCall","src":"2782:7:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2762:3:3"},"nodeType":"YulFunctionCall","src":"2762:28:3"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2752:6:3"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2725:5:3","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2735:6:3","type":""}],"src":"2694:102:3"},{"body":{"nodeType":"YulBlock","src":"2830:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2847:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2850:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2840:6:3"},"nodeType":"YulFunctionCall","src":"2840:88:3"},"nodeType":"YulExpressionStatement","src":"2840:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2944:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2947:4:3","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2937:6:3"},"nodeType":"YulFunctionCall","src":"2937:15:3"},"nodeType":"YulExpressionStatement","src":"2937:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2968:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2971:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2961:6:3"},"nodeType":"YulFunctionCall","src":"2961:15:3"},"nodeType":"YulExpressionStatement","src":"2961:15:3"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2802:180:3"},{"body":{"nodeType":"YulBlock","src":"3031:238:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3041:58:3","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3063:6:3"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3093:4:3"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3071:21:3"},"nodeType":"YulFunctionCall","src":"3071:27:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:3"},"nodeType":"YulFunctionCall","src":"3059:40:3"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3045:10:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"3210:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3212:16:3"},"nodeType":"YulFunctionCall","src":"3212:18:3"},"nodeType":"YulExpressionStatement","src":"3212:18:3"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3153:10:3"},{"kind":"number","nodeType":"YulLiteral","src":"3165:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3150:2:3"},"nodeType":"YulFunctionCall","src":"3150:34:3"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3189:10:3"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3201:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3186:2:3"},"nodeType":"YulFunctionCall","src":"3186:22:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3147:2:3"},"nodeType":"YulFunctionCall","src":"3147:62:3"},"nodeType":"YulIf","src":"3144:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3248:2:3","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3252:10:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3241:6:3"},"nodeType":"YulFunctionCall","src":"3241:22:3"},"nodeType":"YulExpressionStatement","src":"3241:22:3"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3017:6:3","type":""},{"name":"size","nodeType":"YulTypedName","src":"3025:4:3","type":""}],"src":"2988:281:3"},{"body":{"nodeType":"YulBlock","src":"3316:88:3","statements":[{"nodeType":"YulAssignment","src":"3326:30:3","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"3336:18:3"},"nodeType":"YulFunctionCall","src":"3336:20:3"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3326:6:3"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3385:6:3"},{"name":"size","nodeType":"YulIdentifier","src":"3393:4:3"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3365:19:3"},"nodeType":"YulFunctionCall","src":"3365:33:3"},"nodeType":"YulExpressionStatement","src":"3365:33:3"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3300:4:3","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3309:6:3","type":""}],"src":"3275:129:3"},{"body":{"nodeType":"YulBlock","src":"3492:229:3","statements":[{"body":{"nodeType":"YulBlock","src":"3597:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3599:16:3"},"nodeType":"YulFunctionCall","src":"3599:18:3"},"nodeType":"YulExpressionStatement","src":"3599:18:3"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3569:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3577:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3566:2:3"},"nodeType":"YulFunctionCall","src":"3566:30:3"},"nodeType":"YulIf","src":"3563:56:3"},{"nodeType":"YulAssignment","src":"3629:25:3","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3641:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3649:4:3","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3637:3:3"},"nodeType":"YulFunctionCall","src":"3637:17:3"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3629:4:3"}]},{"nodeType":"YulAssignment","src":"3691:23:3","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3703:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"3709:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3699:3:3"},"nodeType":"YulFunctionCall","src":"3699:15:3"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3691:4:3"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3476:6:3","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3487:4:3","type":""}],"src":"3410:311:3"},{"body":{"nodeType":"YulBlock","src":"3816:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3833:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3836:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3826:6:3"},"nodeType":"YulFunctionCall","src":"3826:12:3"},"nodeType":"YulExpressionStatement","src":"3826:12:3"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"3727:117:3"},{"body":{"nodeType":"YulBlock","src":"3969:608:3","statements":[{"nodeType":"YulAssignment","src":"3979:90:3","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4061:6:3"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4004:56:3"},"nodeType":"YulFunctionCall","src":"4004:64:3"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3988:15:3"},"nodeType":"YulFunctionCall","src":"3988:81:3"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3979:5:3"}]},{"nodeType":"YulVariableDeclaration","src":"4078:16:3","value":{"name":"array","nodeType":"YulIdentifier","src":"4089:5:3"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4082:3:3","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4111:5:3"},{"name":"length","nodeType":"YulIdentifier","src":"4118:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4104:6:3"},"nodeType":"YulFunctionCall","src":"4104:21:3"},"nodeType":"YulExpressionStatement","src":"4104:21:3"},{"nodeType":"YulAssignment","src":"4134:23:3","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4145:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"4152:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4141:3:3"},"nodeType":"YulFunctionCall","src":"4141:16:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4134:3:3"}]},{"nodeType":"YulVariableDeclaration","src":"4167:44:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4185:6:3"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4197:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4205:4:3","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4193:3:3"},"nodeType":"YulFunctionCall","src":"4193:17:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4181:3:3"},"nodeType":"YulFunctionCall","src":"4181:30:3"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4171:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"4239:103:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4253:77:3"},"nodeType":"YulFunctionCall","src":"4253:79:3"},"nodeType":"YulExpressionStatement","src":"4253:79:3"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4226:6:3"},{"name":"end","nodeType":"YulIdentifier","src":"4234:3:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4223:2:3"},"nodeType":"YulFunctionCall","src":"4223:15:3"},"nodeType":"YulIf","src":"4220:122:3"},{"body":{"nodeType":"YulBlock","src":"4427:144:3","statements":[{"nodeType":"YulVariableDeclaration","src":"4442:21:3","value":{"name":"src","nodeType":"YulIdentifier","src":"4460:3:3"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"4446:10:3","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4484:3:3"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"4510:10:3"},{"name":"end","nodeType":"YulIdentifier","src":"4522:3:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4489:20:3"},"nodeType":"YulFunctionCall","src":"4489:37:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4477:6:3"},"nodeType":"YulFunctionCall","src":"4477:50:3"},"nodeType":"YulExpressionStatement","src":"4477:50:3"},{"nodeType":"YulAssignment","src":"4540:21:3","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4551:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"4556:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4547:3:3"},"nodeType":"YulFunctionCall","src":"4547:14:3"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4540:3:3"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4380:3:3"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4385:6:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4377:2:3"},"nodeType":"YulFunctionCall","src":"4377:15:3"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4393:25:3","statements":[{"nodeType":"YulAssignment","src":"4395:21:3","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4406:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"4411:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4402:3:3"},"nodeType":"YulFunctionCall","src":"4402:14:3"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4395:3:3"}]}]},"pre":{"nodeType":"YulBlock","src":"4355:21:3","statements":[{"nodeType":"YulVariableDeclaration","src":"4357:17:3","value":{"name":"offset","nodeType":"YulIdentifier","src":"4368:6:3"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4361:3:3","type":""}]}]},"src":"4351:220:3"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3939:6:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"3947:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"3955:3:3","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3963:5:3","type":""}],"src":"3867:710:3"},{"body":{"nodeType":"YulBlock","src":"4677:293:3","statements":[{"body":{"nodeType":"YulBlock","src":"4726:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4728:77:3"},"nodeType":"YulFunctionCall","src":"4728:79:3"},"nodeType":"YulExpressionStatement","src":"4728:79:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4705:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4713:4:3","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4701:3:3"},"nodeType":"YulFunctionCall","src":"4701:17:3"},{"name":"end","nodeType":"YulIdentifier","src":"4720:3:3"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4697:3:3"},"nodeType":"YulFunctionCall","src":"4697:27:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4690:6:3"},"nodeType":"YulFunctionCall","src":"4690:35:3"},"nodeType":"YulIf","src":"4687:122:3"},{"nodeType":"YulVariableDeclaration","src":"4818:34:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4845:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4832:12:3"},"nodeType":"YulFunctionCall","src":"4832:20:3"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4822:6:3","type":""}]},{"nodeType":"YulAssignment","src":"4861:103:3","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4937:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4945:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4933:3:3"},"nodeType":"YulFunctionCall","src":"4933:17:3"},{"name":"length","nodeType":"YulIdentifier","src":"4952:6:3"},{"name":"end","nodeType":"YulIdentifier","src":"4960:3:3"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4870:62:3"},"nodeType":"YulFunctionCall","src":"4870:94:3"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4861:5:3"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4655:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"4663:3:3","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4671:5:3","type":""}],"src":"4600:370:3"},{"body":{"nodeType":"YulBlock","src":"5084:576:3","statements":[{"body":{"nodeType":"YulBlock","src":"5130:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5132:77:3"},"nodeType":"YulFunctionCall","src":"5132:79:3"},"nodeType":"YulExpressionStatement","src":"5132:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5105:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"5114:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5101:3:3"},"nodeType":"YulFunctionCall","src":"5101:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"5126:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5097:3:3"},"nodeType":"YulFunctionCall","src":"5097:32:3"},"nodeType":"YulIf","src":"5094:119:3"},{"nodeType":"YulBlock","src":"5223:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5238:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"5252:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5242:6:3","type":""}]},{"nodeType":"YulAssignment","src":"5267:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5302:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5313:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5298:3:3"},"nodeType":"YulFunctionCall","src":"5298:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5322:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5277:20:3"},"nodeType":"YulFunctionCall","src":"5277:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5267:6:3"}]}]},{"nodeType":"YulBlock","src":"5350:303:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5365:46:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5396:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"5407:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5392:3:3"},"nodeType":"YulFunctionCall","src":"5392:18:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5379:12:3"},"nodeType":"YulFunctionCall","src":"5379:32:3"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5369:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"5458:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5460:77:3"},"nodeType":"YulFunctionCall","src":"5460:79:3"},"nodeType":"YulExpressionStatement","src":"5460:79:3"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5430:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"5438:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5427:2:3"},"nodeType":"YulFunctionCall","src":"5427:30:3"},"nodeType":"YulIf","src":"5424:117:3"},{"nodeType":"YulAssignment","src":"5555:88:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5615:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5626:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5611:3:3"},"nodeType":"YulFunctionCall","src":"5611:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5635:7:3"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"5565:45:3"},"nodeType":"YulFunctionCall","src":"5565:78:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5555:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5046:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5057:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5069:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5077:6:3","type":""}],"src":"4976:684:3"},{"body":{"nodeType":"YulBlock","src":"5719:51:3","statements":[{"nodeType":"YulAssignment","src":"5729:35:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5758:5:3"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5740:17:3"},"nodeType":"YulFunctionCall","src":"5740:24:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5729:7:3"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5701:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5711:7:3","type":""}],"src":"5666:104:3"},{"body":{"nodeType":"YulBlock","src":"5857:61:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5874:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5905:5:3"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"5879:25:3"},"nodeType":"YulFunctionCall","src":"5879:32:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5867:6:3"},"nodeType":"YulFunctionCall","src":"5867:45:3"},"nodeType":"YulExpressionStatement","src":"5867:45:3"}]},"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5845:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5852:3:3","type":""}],"src":"5776:142:3"},{"body":{"nodeType":"YulBlock","src":"6038:140:3","statements":[{"nodeType":"YulAssignment","src":"6048:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6060:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6071:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6056:3:3"},"nodeType":"YulFunctionCall","src":"6056:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6048:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6144:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6157:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6168:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6153:3:3"},"nodeType":"YulFunctionCall","src":"6153:17:3"}],"functionName":{"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulIdentifier","src":"6084:59:3"},"nodeType":"YulFunctionCall","src":"6084:87:3"},"nodeType":"YulExpressionStatement","src":"6084:87:3"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6010:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6022:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6033:4:3","type":""}],"src":"5924:254:3"},{"body":{"nodeType":"YulBlock","src":"6212:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6229:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6232:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6222:6:3"},"nodeType":"YulFunctionCall","src":"6222:88:3"},"nodeType":"YulExpressionStatement","src":"6222:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6326:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6329:4:3","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6319:6:3"},"nodeType":"YulFunctionCall","src":"6319:15:3"},"nodeType":"YulExpressionStatement","src":"6319:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6350:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6353:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6343:6:3"},"nodeType":"YulFunctionCall","src":"6343:15:3"},"nodeType":"YulExpressionStatement","src":"6343:15:3"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6184:180:3"},{"body":{"nodeType":"YulBlock","src":"6414:147:3","statements":[{"nodeType":"YulAssignment","src":"6424:25:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6447:1:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6429:17:3"},"nodeType":"YulFunctionCall","src":"6429:20:3"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6424:1:3"}]},{"nodeType":"YulAssignment","src":"6458:25:3","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6481:1:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6463:17:3"},"nodeType":"YulFunctionCall","src":"6463:20:3"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6458:1:3"}]},{"nodeType":"YulAssignment","src":"6492:16:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6503:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"6506:1:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6499:3:3"},"nodeType":"YulFunctionCall","src":"6499:9:3"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6492:3:3"}]},{"body":{"nodeType":"YulBlock","src":"6532:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6534:16:3"},"nodeType":"YulFunctionCall","src":"6534:18:3"},"nodeType":"YulExpressionStatement","src":"6534:18:3"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6524:1:3"},{"name":"sum","nodeType":"YulIdentifier","src":"6527:3:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6521:2:3"},"nodeType":"YulFunctionCall","src":"6521:10:3"},"nodeType":"YulIf","src":"6518:36:3"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6401:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"6404:1:3","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6410:3:3","type":""}],"src":"6370:191:3"},{"body":{"nodeType":"YulBlock","src":"6595:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6612:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6615:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6605:6:3"},"nodeType":"YulFunctionCall","src":"6605:88:3"},"nodeType":"YulExpressionStatement","src":"6605:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6709:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6712:4:3","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6702:6:3"},"nodeType":"YulFunctionCall","src":"6702:15:3"},"nodeType":"YulExpressionStatement","src":"6702:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6733:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6736:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6726:6:3"},"nodeType":"YulFunctionCall","src":"6726:15:3"},"nodeType":"YulExpressionStatement","src":"6726:15:3"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6567:180:3"},{"body":{"nodeType":"YulBlock","src":"6849:73:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6866:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"6871:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6859:6:3"},"nodeType":"YulFunctionCall","src":"6859:19:3"},"nodeType":"YulExpressionStatement","src":"6859:19:3"},{"nodeType":"YulAssignment","src":"6887:29:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6906:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"6911:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6902:3:3"},"nodeType":"YulFunctionCall","src":"6902:14:3"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6887:11:3"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6821:3:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"6826:6:3","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6837:11:3","type":""}],"src":"6753:169:3"},{"body":{"nodeType":"YulBlock","src":"7034:144:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7056:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7064:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7052:3:3"},"nodeType":"YulFunctionCall","src":"7052:14:3"},{"hexValue":"596f752063616e6e6f74207365652074686520706c6179657273206164647265","kind":"string","nodeType":"YulLiteral","src":"7068:34:3","type":"","value":"You cannot see the players addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7045:6:3"},"nodeType":"YulFunctionCall","src":"7045:58:3"},"nodeType":"YulExpressionStatement","src":"7045:58:3"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7124:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7132:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7120:3:3"},"nodeType":"YulFunctionCall","src":"7120:15:3"},{"hexValue":"7373206265636175736520796f7520617265206e6f742074686174206f6e65","kind":"string","nodeType":"YulLiteral","src":"7137:33:3","type":"","value":"ss because you are not that one"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7113:6:3"},"nodeType":"YulFunctionCall","src":"7113:58:3"},"nodeType":"YulExpressionStatement","src":"7113:58:3"}]},"name":"store_literal_in_memory_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7026:6:3","type":""}],"src":"6928:250:3"},{"body":{"nodeType":"YulBlock","src":"7330:220:3","statements":[{"nodeType":"YulAssignment","src":"7340:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7406:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"7411:2:3","type":"","value":"63"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7347:58:3"},"nodeType":"YulFunctionCall","src":"7347:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7340:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7512:3:3"}],"functionName":{"name":"store_literal_in_memory_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0","nodeType":"YulIdentifier","src":"7423:88:3"},"nodeType":"YulFunctionCall","src":"7423:93:3"},"nodeType":"YulExpressionStatement","src":"7423:93:3"},{"nodeType":"YulAssignment","src":"7525:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7536:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"7541:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7532:3:3"},"nodeType":"YulFunctionCall","src":"7532:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7525:3:3"}]}]},"name":"abi_encode_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7318:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7326:3:3","type":""}],"src":"7184:366:3"},{"body":{"nodeType":"YulBlock","src":"7727:248:3","statements":[{"nodeType":"YulAssignment","src":"7737:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7749:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7760:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7745:3:3"},"nodeType":"YulFunctionCall","src":"7745:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7737:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7784:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7795:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7780:3:3"},"nodeType":"YulFunctionCall","src":"7780:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7803:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"7809:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7799:3:3"},"nodeType":"YulFunctionCall","src":"7799:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7773:6:3"},"nodeType":"YulFunctionCall","src":"7773:47:3"},"nodeType":"YulExpressionStatement","src":"7773:47:3"},{"nodeType":"YulAssignment","src":"7829:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7963:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7837:124:3"},"nodeType":"YulFunctionCall","src":"7837:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7829:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7707:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7722:4:3","type":""}],"src":"7556:419:3"},{"body":{"nodeType":"YulBlock","src":"8107:206:3","statements":[{"nodeType":"YulAssignment","src":"8117:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8129:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8140:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8125:3:3"},"nodeType":"YulFunctionCall","src":"8125:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8117:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8197:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8210:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8221:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8206:3:3"},"nodeType":"YulFunctionCall","src":"8206:17:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8153:43:3"},"nodeType":"YulFunctionCall","src":"8153:71:3"},"nodeType":"YulExpressionStatement","src":"8153:71:3"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8278:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8291:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8302:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8287:3:3"},"nodeType":"YulFunctionCall","src":"8287:18:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8234:43:3"},"nodeType":"YulFunctionCall","src":"8234:72:3"},"nodeType":"YulExpressionStatement","src":"8234:72:3"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8071:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8083:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8091:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8102:4:3","type":""}],"src":"7981:332:3"},{"body":{"nodeType":"YulBlock","src":"8362:190:3","statements":[{"nodeType":"YulAssignment","src":"8372:33:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8399:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8381:17:3"},"nodeType":"YulFunctionCall","src":"8381:24:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8372:5:3"}]},{"body":{"nodeType":"YulBlock","src":"8495:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8497:16:3"},"nodeType":"YulFunctionCall","src":"8497:18:3"},"nodeType":"YulExpressionStatement","src":"8497:18:3"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8420:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"8427:66:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8417:2:3"},"nodeType":"YulFunctionCall","src":"8417:77:3"},"nodeType":"YulIf","src":"8414:103:3"},{"nodeType":"YulAssignment","src":"8526:20:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8537:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"8544:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8533:3:3"},"nodeType":"YulFunctionCall","src":"8533:13:3"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8526:3:3"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8348:5:3","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8358:3:3","type":""}],"src":"8319:233:3"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0(memPtr) {\n\n        mstore(add(memPtr, 0), \"You cannot see the players addre\")\n\n        mstore(add(memPtr, 32), \"ss because you are not that one\")\n\n    }\n\n    function abi_encode_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 63)\n        store_literal_in_memory_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9ec1757379dab03a615995d921e6e5d12c5a7e43542de27aa2a3150c33a134c0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n}\n","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":1320},{"length":32,"start":1404}]},"linkReferences":{},"object":"608060405260043610610090575f3560e01c8063809c4d8511610058578063809c4d851461016857806397ea286514610192578063c2750f99146101ce578063c44778ad146101f8578063ed0747091461022257610090565b8063031309b91461009457806304a3aba91461009e57806309bc33a7146100da5780631625b570146101045780631fe543e314610140575b5f80fd5b61009c61025e565b005b3480156100a9575f80fd5b506100c460048036038101906100bf919061077d565b61041a565b6040516100d191906107e7565b60405180910390f35b3480156100e5575f80fd5b506100ee610509565b6040516100fb919061080f565b60405180910390f35b34801561010f575f80fd5b5061012a60048036038101906101259190610852565b610511565b604051610137919061080f565b60405180910390f35b34801561014b575f80fd5b50610166600480360381019061016191906109cd565b610526565b005b348015610173575f80fd5b5061017c6105e6565b604051610189919061080f565b60405180910390f35b34801561019d575f80fd5b506101b860048036038101906101b3919061077d565b61062a565b6040516101c59190610a47565b60405180910390f35b3480156101d9575f80fd5b506101e2610665565b6040516101ef919061080f565b60405180910390f35b348015610203575f80fd5b5061020c61071a565b604051610219919061080f565b60405180910390f35b34801561022d575f80fd5b5061024860048036038101906102439190610852565b610720565b604051610255919061080f565b60405180910390f35b60015460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054106102d6576040517ff80ac7d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f54341015610311576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600233908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103bd9190610a8d565b92505081905550600160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546104119190610a8d565b92505081905550565b5f813373ffffffffffffffffffffffffffffffffffffffff166002828154811061044757610446610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90610b6d565b60405180910390fd5b600283815481106104d9576104d8610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f8054905090565b6004602052805f5260405f205f915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105cf929190610b8b565b60405180910390fd5b6105e28282610735565b5050565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b60028181548110610639575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f90505f5b6002805490508110156107125760045f600283815481106106905761068f610ac0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054826106fd9190610a8d565b9150808061070a90610bb2565b91505061066c565b508091505090565b60015481565b6003602052805f5260405f205f915090505481565b5050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61075c8161074a565b8114610766575f80fd5b50565b5f8135905061077781610753565b92915050565b5f6020828403121561079257610791610742565b5b5f61079f84828501610769565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107d1826107a8565b9050919050565b6107e1816107c7565b82525050565b5f6020820190506107fa5f8301846107d8565b92915050565b6108098161074a565b82525050565b5f6020820190506108225f830184610800565b92915050565b610831816107c7565b811461083b575f80fd5b50565b5f8135905061084c81610828565b92915050565b5f6020828403121561086757610866610742565b5b5f6108748482850161083e565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6108c782610881565b810181811067ffffffffffffffff821117156108e6576108e5610891565b5b80604052505050565b5f6108f8610739565b905061090482826108be565b919050565b5f67ffffffffffffffff82111561092357610922610891565b5b602082029050602081019050919050565b5f80fd5b5f61094a61094584610909565b6108ef565b9050808382526020820190506020840283018581111561096d5761096c610934565b5b835b8181101561099657806109828882610769565b84526020840193505060208101905061096f565b5050509392505050565b5f82601f8301126109b4576109b361087d565b5b81356109c4848260208601610938565b91505092915050565b5f80604083850312156109e3576109e2610742565b5b5f6109f085828601610769565b925050602083013567ffffffffffffffff811115610a1157610a10610746565b5b610a1d858286016109a0565b9150509250929050565b5f610a31826107a8565b9050919050565b610a4181610a27565b82525050565b5f602082019050610a5a5f830184610a38565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a978261074a565b9150610aa28361074a565b9250828201905080821115610aba57610ab9610a60565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f596f752063616e6e6f74207365652074686520706c61796572732061646472655f8201527f7373206265636175736520796f7520617265206e6f742074686174206f6e6500602082015250565b5f610b57603f83610aed565b9150610b6282610afd565b604082019050919050565b5f6020820190508181035f830152610b8481610b4b565b9050919050565b5f604082019050610b9e5f8301856107d8565b610bab60208301846107d8565b9392505050565b5f610bbc8261074a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bee57610bed610a60565b5b60018201905091905056fea26469706673582212207cc73b21ec567c5cc4b10c9184fa8e48cecf71453597f0129f4f0e28bbd717ef64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x90 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x809C4D85 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x809C4D85 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x97EA2865 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xC2750F99 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0xC44778AD EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xED074709 EQ PUSH2 0x222 JUMPI PUSH2 0x90 JUMP JUMPDEST DUP1 PUSH4 0x31309B9 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x4A3ABA9 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x1625B570 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x140 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x25E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD1 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x511 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x161 SWAP2 SWAP1 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x526 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x5E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x203 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x20C PUSH2 0x71A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x720 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD LT PUSH2 0x2D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF80AC7D900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD CALLVALUE LT ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3C21F23000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x447 JUMPI PUSH2 0x446 PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xB6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x4D9 JUMPI PUSH2 0x4D8 PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D8 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CF SWAP3 SWAP2 SWAP1 PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E2 DUP3 DUP3 PUSH2 0x735 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x639 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH0 JUMPDEST PUSH1 0x2 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x712 JUMPI PUSH1 0x4 PUSH0 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x690 JUMPI PUSH2 0x68F PUSH2 0xAC0 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP3 PUSH2 0x6FD SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0x70A SWAP1 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x66C JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x75C DUP2 PUSH2 0x74A JUMP JUMPDEST DUP2 EQ PUSH2 0x766 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x777 DUP2 PUSH2 0x753 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x792 JUMPI PUSH2 0x791 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x79F DUP5 DUP3 DUP6 ADD PUSH2 0x769 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7D1 DUP3 PUSH2 0x7A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E1 DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7FA PUSH0 DUP4 ADD DUP5 PUSH2 0x7D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x809 DUP2 PUSH2 0x74A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x822 PUSH0 DUP4 ADD DUP5 PUSH2 0x800 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x831 DUP2 PUSH2 0x7C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x83B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x84C DUP2 PUSH2 0x828 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x867 JUMPI PUSH2 0x866 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x874 DUP5 DUP3 DUP6 ADD PUSH2 0x83E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x8C7 DUP3 PUSH2 0x881 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8E6 JUMPI PUSH2 0x8E5 PUSH2 0x891 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x8F8 PUSH2 0x739 JUMP JUMPDEST SWAP1 POP PUSH2 0x904 DUP3 DUP3 PUSH2 0x8BE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x923 JUMPI PUSH2 0x922 PUSH2 0x891 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH2 0x94A PUSH2 0x945 DUP5 PUSH2 0x909 JUMP JUMPDEST PUSH2 0x8EF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x96D JUMPI PUSH2 0x96C PUSH2 0x934 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x996 JUMPI DUP1 PUSH2 0x982 DUP9 DUP3 PUSH2 0x769 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x96F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9B4 JUMPI PUSH2 0x9B3 PUSH2 0x87D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9C4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x938 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E3 JUMPI PUSH2 0x9E2 PUSH2 0x742 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x9F0 DUP6 DUP3 DUP7 ADD PUSH2 0x769 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA11 JUMPI PUSH2 0xA10 PUSH2 0x746 JUMP JUMPDEST JUMPDEST PUSH2 0xA1D DUP6 DUP3 DUP7 ADD PUSH2 0x9A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xA31 DUP3 PUSH2 0x7A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA41 DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA5A PUSH0 DUP4 ADD DUP5 PUSH2 0xA38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xA97 DUP3 PUSH2 0x74A JUMP JUMPDEST SWAP2 POP PUSH2 0xAA2 DUP4 PUSH2 0x74A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xABA JUMPI PUSH2 0xAB9 PUSH2 0xA60 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752063616E6E6F74207365652074686520706C6179657273206164647265 PUSH0 DUP3 ADD MSTORE PUSH32 0x7373206265636175736520796F7520617265206E6F742074686174206F6E6500 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xB57 PUSH1 0x3F DUP4 PUSH2 0xAED JUMP JUMPDEST SWAP2 POP PUSH2 0xB62 DUP3 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xB84 DUP2 PUSH2 0xB4B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xB9E PUSH0 DUP4 ADD DUP6 PUSH2 0x7D8 JUMP JUMPDEST PUSH2 0xBAB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7D8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBBC DUP3 PUSH2 0x74A JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xBEE JUMPI PUSH2 0xBED PUSH2 0xA60 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xC73B21EC567C5CC4B10C9184FA8E48CECF71453597F0129F4F0E28BBD7 OR 0xEF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"279:2057:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;937:404;;;:::i;:::-;;1661:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1349:92;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;613:46;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2220:113:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;519:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1905:307;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;484:28;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;560:46;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;937:404;1017:13;;990:11;:23;1002:10;990:23;;;;;;;;;;;;;;;;:40;987:82;;1039:30;;;;;;;;;;;;;;987:82;1095:12;;1083:9;:24;1080:56;;;1115:21;;;;;;;;;;;;;;1080:56;1212:9;1235:10;1212:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1285:9;1258:11;:23;1270:10;1258:23;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;1332:1;1305:11;:23;1317:10;1305:23;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;937:404::o;1661:125::-;1735:7;1708:5;1555:10;1535:30;;:9;1545:5;1535:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:30;;;1527:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;1762:9:::1;1772:5;1762:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1755:23;;1661:125:::0;;;;:::o;1349:92::-;1395:7;1421:12;;1414:19;;1349:92;:::o;613:46::-;;;;;;;;;;;;;;;;;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;2220:113:2:-;2266:7;2293:11;:32;2313:10;2293:32;;;;;;;;;;;;;;;;2286:39;;2220:113;:::o;519:34::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1905:307::-;1952:7;1972:26;2001:1;1972:30;;2017:17;2013:156;2048:9;:16;;;;2036:9;:28;2013:156;;;2115:11;:42;2135:9;2145;2135:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2115:42;;;;;;;;;;;;;;;;2093:64;;;;;:::i;:::-;;;2066:11;;;;;:::i;:::-;;;;2013:156;;;;2186:18;2179:25;;;1905:307;:::o;484:28::-;;;;:::o;560:46::-;;;;;;;;;;;;;;;;;:::o;1794:103::-;;;:::o;7:75:3:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:126::-;1062:7;1102:42;1095:5;1091:54;1080:65;;1025:126;;;:::o;1157:96::-;1194:7;1223:24;1241:5;1223:24;:::i;:::-;1212:35;;1157:96;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:118::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1611:118;;:::o;1735:222::-;1828:4;1866:2;1855:9;1851:18;1843:26;;1879:71;1947:1;1936:9;1932:17;1923:6;1879:71;:::i;:::-;1735:222;;;;:::o;1963:122::-;2036:24;2054:5;2036:24;:::i;:::-;2029:5;2026:35;2016:63;;2075:1;2072;2065:12;2016:63;1963:122;:::o;2091:139::-;2137:5;2175:6;2162:20;2153:29;;2191:33;2218:5;2191:33;:::i;:::-;2091:139;;;;:::o;2236:329::-;2295:6;2344:2;2332:9;2323:7;2319:23;2315:32;2312:119;;;2350:79;;:::i;:::-;2312:119;2470:1;2495:53;2540:7;2531:6;2520:9;2516:22;2495:53;:::i;:::-;2485:63;;2441:117;2236:329;;;;:::o;2571:117::-;2680:1;2677;2670:12;2694:102;2735:6;2786:2;2782:7;2777:2;2770:5;2766:14;2762:28;2752:38;;2694:102;;;:::o;2802:180::-;2850:77;2847:1;2840:88;2947:4;2944:1;2937:15;2971:4;2968:1;2961:15;2988:281;3071:27;3093:4;3071:27;:::i;:::-;3063:6;3059:40;3201:6;3189:10;3186:22;3165:18;3153:10;3150:34;3147:62;3144:88;;;3212:18;;:::i;:::-;3144:88;3252:10;3248:2;3241:22;3031:238;2988:281;;:::o;3275:129::-;3309:6;3336:20;;:::i;:::-;3326:30;;3365:33;3393:4;3385:6;3365:33;:::i;:::-;3275:129;;;:::o;3410:311::-;3487:4;3577:18;3569:6;3566:30;3563:56;;;3599:18;;:::i;:::-;3563:56;3649:4;3641:6;3637:17;3629:25;;3709:4;3703;3699:15;3691:23;;3410:311;;;:::o;3727:117::-;3836:1;3833;3826:12;3867:710;3963:5;3988:81;4004:64;4061:6;4004:64;:::i;:::-;3988:81;:::i;:::-;3979:90;;4089:5;4118:6;4111:5;4104:21;4152:4;4145:5;4141:16;4134:23;;4205:4;4197:6;4193:17;4185:6;4181:30;4234:3;4226:6;4223:15;4220:122;;;4253:79;;:::i;:::-;4220:122;4368:6;4351:220;4385:6;4380:3;4377:15;4351:220;;;4460:3;4489:37;4522:3;4510:10;4489:37;:::i;:::-;4484:3;4477:50;4556:4;4551:3;4547:14;4540:21;;4427:144;4411:4;4406:3;4402:14;4395:21;;4351:220;;;4355:21;3969:608;;3867:710;;;;;:::o;4600:370::-;4671:5;4720:3;4713:4;4705:6;4701:17;4697:27;4687:122;;4728:79;;:::i;:::-;4687:122;4845:6;4832:20;4870:94;4960:3;4952:6;4945:4;4937:6;4933:17;4870:94;:::i;:::-;4861:103;;4677:293;4600:370;;;;:::o;4976:684::-;5069:6;5077;5126:2;5114:9;5105:7;5101:23;5097:32;5094:119;;;5132:79;;:::i;:::-;5094:119;5252:1;5277:53;5322:7;5313:6;5302:9;5298:22;5277:53;:::i;:::-;5267:63;;5223:117;5407:2;5396:9;5392:18;5379:32;5438:18;5430:6;5427:30;5424:117;;;5460:79;;:::i;:::-;5424:117;5565:78;5635:7;5626:6;5615:9;5611:22;5565:78;:::i;:::-;5555:88;;5350:303;4976:684;;;;;:::o;5666:104::-;5711:7;5740:24;5758:5;5740:24;:::i;:::-;5729:35;;5666:104;;;:::o;5776:142::-;5879:32;5905:5;5879:32;:::i;:::-;5874:3;5867:45;5776:142;;:::o;5924:254::-;6033:4;6071:2;6060:9;6056:18;6048:26;;6084:87;6168:1;6157:9;6153:17;6144:6;6084:87;:::i;:::-;5924:254;;;;:::o;6184:180::-;6232:77;6229:1;6222:88;6329:4;6326:1;6319:15;6353:4;6350:1;6343:15;6370:191;6410:3;6429:20;6447:1;6429:20;:::i;:::-;6424:25;;6463:20;6481:1;6463:20;:::i;:::-;6458:25;;6506:1;6503;6499:9;6492:16;;6527:3;6524:1;6521:10;6518:36;;;6534:18;;:::i;:::-;6518:36;6370:191;;;;:::o;6567:180::-;6615:77;6612:1;6605:88;6712:4;6709:1;6702:15;6736:4;6733:1;6726:15;6753:169;6837:11;6871:6;6866:3;6859:19;6911:4;6906:3;6902:14;6887:29;;6753:169;;;;:::o;6928:250::-;7068:34;7064:1;7056:6;7052:14;7045:58;7137:33;7132:2;7124:6;7120:15;7113:58;6928:250;:::o;7184:366::-;7326:3;7347:67;7411:2;7406:3;7347:67;:::i;:::-;7340:74;;7423:93;7512:3;7423:93;:::i;:::-;7541:2;7536:3;7532:12;7525:19;;7184:366;;;:::o;7556:419::-;7722:4;7760:2;7749:9;7745:18;7737:26;;7809:9;7803:4;7799:20;7795:1;7784:9;7780:17;7773:47;7837:131;7963:4;7837:131;:::i;:::-;7829:139;;7556:419;;;:::o;7981:332::-;8102:4;8140:2;8129:9;8125:18;8117:26;;8153:71;8221:1;8210:9;8206:17;8197:6;8153:71;:::i;:::-;8234:72;8302:2;8291:9;8287:18;8278:6;8234:72;:::i;:::-;7981:332;;;;;:::o;8319:233::-;8358:3;8381:24;8399:5;8381:24;:::i;:::-;8372:33;;8427:66;8420:5;8417:77;8414:103;;8497:18;;:::i;:::-;8414:103;8544:1;8537:5;8533:13;8526:20;;8319:233;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"623800","executionCost":"infinite","totalCost":"infinite"},"external":{"GetYourDetails()":"2519","enter_count(address)":"2890","enter_nishaq()":"infinite","getEntranceFee()":"2477","getTotalFunding()":"infinite","get_player(uint256)":"9329","maxEnterCount()":"2491","n_players(uint256)":"4966","rawFulfillRandomWords(uint256,uint256[])":"infinite","total_funds(address)":"2869"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"13"}},"methodIdentifiers":{"GetYourDetails()":"809c4d85","enter_count(address)":"ed074709","enter_nishaq()":"031309b9","getEntranceFee()":"09bc33a7","getTotalFunding()":"c2750f99","get_player(uint256)":"04a3aba9","maxEnterCount()":"c44778ad","n_players(uint256)":"97ea2865","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","total_funds(address)":"1625b570"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entrance_fee_init\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEnterCount_init\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrf_coordinator_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"You_Already_Entered_MaxTimes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetYourDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enter_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter_nishaq\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_player\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"n_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nishaq.sol\":\"Nishaq\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Nishaq.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nerror NotEnoughETHEntered();\\r\\nerror You_Already_Entered_MaxTimes();\\r\\n\\r\\ncontract Nishaq is VRFConsumerBaseV2{\\r\\n    address private immutable owner;\\r\\n    // setting the owner variable on the above line to  set the Owner of the Contract\\r\\n\\r\\n    uint256 private entrance_fee;\\r\\n    uint256 public maxEnterCount;\\r\\n    address payable[] public n_players;\\r\\n    mapping(address => uint256) public enter_count;\\r\\n    mapping(address => uint256) public total_funds;\\r\\n\\r\\n    constructor(uint256 entrance_fee_init, uint256 maxEnterCount_init, address vrf_coordinator_addr) VRFConsumerBaseV2(vrf_coordinator_addr){\\r\\n        entrance_fee = entrance_fee_init;\\r\\n        maxEnterCount = maxEnterCount_init;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function enter_nishaq() public payable {\\r\\n        if(enter_count[msg.sender] >= maxEnterCount) revert You_Already_Entered_MaxTimes();\\r\\n        if(msg.value < entrance_fee)revert NotEnoughETHEntered();\\r\\n        // Finding if player already exists in the array or not\\r\\n        n_players.push(payable(msg.sender));\\r\\n        total_funds[msg.sender] += msg.value;\\r\\n        enter_count[msg.sender] += 1;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns(uint256){\\r\\n        return entrance_fee;\\r\\n    }\\r\\n    // Modifier Only_Entered_One\\r\\n    modifier entered_one(uint256 index){\\r\\n        require(n_players[index] == msg.sender, \\\"You cannot see the players address because you are not that one\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function get_player(uint256 index) entered_one(index) public view returns(address) {\\r\\n        return n_players[index];\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\r\\n    }\\r\\n\\r\\n    function getTotalFunding() public view returns(uint256) {\\r\\n        uint256 temp_total_funding = 0;\\r\\n        for(uint256 pla_index; pla_index < n_players.length; pla_index++){\\r\\n            temp_total_funding += total_funds[address(n_players[pla_index])];\\r\\n        }\\r\\n        return temp_total_funding;\\r\\n    }\\r\\n\\r\\n    function GetYourDetails() public view returns(uint256) {\\r\\n        return total_funds[address(msg.sender)];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbcdd68460358b94154c20a2e4f02b481b9c457a8678ad6a206e04c2242a01f6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":167,"contract":"contracts/Nishaq.sol:Nishaq","label":"entrance_fee","offset":0,"slot":"0","type":"t_uint256"},{"astId":169,"contract":"contracts/Nishaq.sol:Nishaq","label":"maxEnterCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":172,"contract":"contracts/Nishaq.sol:Nishaq","label":"n_players","offset":0,"slot":"2","type":"t_array(t_address_payable)dyn_storage"},{"astId":176,"contract":"contracts/Nishaq.sol:Nishaq","label":"enter_count","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":180,"contract":"contracts/Nishaq.sol:Nishaq","label":"total_funds","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}